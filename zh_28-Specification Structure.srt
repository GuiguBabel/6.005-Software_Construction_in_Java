1
00:00:00,500 --> 00:00:03,060
方法的规范有两部分。
Specification of a method has two parts.

2
00:00:03,060 --> 00:00:05,170
有一个先决条件
There is the precondition, which is indicated

3
00:00:05,170 --> 00:00:08,400
由这个关键词“需要”，和后置条件，表示
by this key word "requires", and the postcondition, indicated

4
00:00:08,400 --> 00:00:10,560
通过关键字“影响”
by the keyword "affects."

5
00:00:10,560 --> 00:00:13,060
先决条件是客户的义务，
Precondition is an obligation on the client,

6
00:00:13,060 --> 00:00:14,715
方法的调用方。
the caller of the method.

7
00:00:14,715 --> 00:00:17,540
它是调用方法的状态的条件。
It's a condition on the state in which the method is invoked.

8
00:00:17,540 --> 00:00:20,680
通常它会讨论那个函数的参数，
Usually it talks about the arguments of that function,

9
00:00:20,680 --> 00:00:22,560
但它可能会谈到
but it may talk about other things that are

10
00:00:22,560 --> 00:00:24,620
在程序状态下。
in the state of the program.

11
00:00:24,620 --> 00:00:26,977
后置条件是实施者的义务
Postcondition is an obligation on the implementer

12
00:00:26,977 --> 00:00:27,560
方法。
of the method.

13
00:00:27,560 --> 00:00:31,010
它说的是方法完成后必须是真的，
It says what has to be true after the method completes,

14
00:00:31,010 --> 00:00:35,720
如果方法启动时保留了前提条件。
if the precondition held when the method started.

15
00:00:35,720 --> 00:00:38,530
它的整体结构是一个逻辑含义。
The overall structure of this is a logical implication.

16
00:00:38,530 --> 00:00:41,470
所以如果输入满足前提条件，
So if the input satisfies the precondition,

17
00:00:41,470 --> 00:00:43,760
如果在调用方法时前提条件成立，
if the precondition holds when the method is called,

18
00:00:43,760 --> 00:00:49,150
当方法完成时，后条件必须保持。
then the postcondition must hold when the method completes.

19
00:00:49,150 --> 00:00:50,655
但如果前提条件不成立
But if the precondition didn't hold

20
00:00:50,655 --> 00:00:52,780
当调用方法时，则实现
when the method was called, then the implementation

21
00:00:52,780 --> 00:00:55,490
没有义务满足后条件。
is not obligated to satisfy the postcondition.

22
00:00:55,490 --> 00:00:57,830
事实上，它可以做任何事情，包括
In fact, it's free to do anything, including

23
00:00:57,830 --> 00:01:01,490
永远循环，或者抛出一个意外的异常，
looping forever, or throwing an exception that's unexpected,

24
00:01:01,490 --> 00:01:04,110
返回一些任意的结果，使一些任意的
returning some arbitrary result, making some arbitrary

25
00:01:04,110 --> 00:01:06,230
修改数据结构。
modification to a data structure.

26
00:01:06,230 --> 00:01:08,430
如果输入不正确，所有下注都将被取消
All bets are off if the input doesn't

27
00:01:08,430 --> 00:01:11,220
满足前提条件。
satisfy the precondition.

28
00:01:11,220 --> 00:01:12,640
在Java中这看起来怎么样？
Now how does this look in Java?

29
00:01:12,640 --> 00:01:15,610
嗯，有一些语言，一个很好的例子
Well, there are some languages, a good example

30
00:01:15,610 --> 00:01:19,430
是埃菲尔铁塔吗，那实际上包括了先决条件
is Eiffel, that actually include preconditions

31
00:01:19,430 --> 00:01:22,710
以及作为语言一部分的后置条件。
and post-conditions as part of the language.

32
00:01:22,710 --> 00:01:25,020
它们由运行时系统强制执行，甚至
And they're enforced by the runtime system or even

33
00:01:25,020 --> 00:01:27,950
由编译器编写。
by the compiler.

34
00:01:27,950 --> 00:01:31,890
Java并没有走那么远，但是静态类型
Java doesn't go quite that far, but the static types

35
00:01:31,890 --> 00:01:34,109
我们已经谈过的是有效的
that we've already talked about are effectively

36
00:01:34,109 --> 00:01:36,400
方法的先决条件和后决条件的一部分。
part of the precondition and postcondition of a method.

37
00:01:36,400 --> 00:01:38,917
你说的第一个参数
The fact that you have said that this first parameter

38
00:01:38,917 --> 00:01:39,875
必须是int数组。
has to be an int array.

39
00:01:39,875 --> 00:01:42,080
第二个参数必须是int，
The second parameter has to be an int,

40
00:01:42,080 --> 00:01:46,980
它必须返回一个int——这些是约束
and it has to return an int-- these are constraints

41
00:01:46,980 --> 00:01:50,225
论方法的输入与输出
on the input to the method and the output of the method

42
00:01:50,225 --> 00:01:53,620
实际上是由编译器检查的。
that are actually checked by the compiler.

43
00:01:53,620 --> 00:01:55,280
很好，因为那意味着
And that's good, because that means

44
00:01:55,280 --> 00:01:58,510
检查和执行是自动进行的。
that checking and enforcement is happening automatically.

45
00:01:58,510 --> 00:02:00,120
但合同的其余部分，
The rest of the contract, however,

46
00:02:00,120 --> 00:02:02,710
剩下的部分，我们很难
the rest of the spec, the parts that we can't easily

47
00:02:02,710 --> 00:02:05,590
以Java类型编写——我们必须写下来
write as Java types-- we have to write down instead

48
00:02:05,590 --> 00:02:08,400
在方法前面的注释中。
in a comment, preceding the method.

49
00:02:08,400 --> 00:02:11,290
一般来说，这取决于人类，程序员，
And generally that depends on human beings, programmers,

50
00:02:11,290 --> 00:02:13,540
检查并保证。
to check it and guarantee it.

51
00:02:13,540 --> 00:02:15,210
现在Java有了一个特殊的约定
Now Java has a particular convention

52
00:02:15,210 --> 00:02:16,710
写这些评论。
for writing these kinds of comments.

53
00:02:16,710 --> 00:02:18,145
它们被称为Javadoc注释。
They're called Javadoc comments.

55
00:02:20,660 --> 00:02:23,200
在Javadoc的评论中，您
And in those Javadoc comments, you

56
00:02:23,200 --> 00:02:26,840
使用这些at param子句描述参数
describe the parameters using these at param clauses

57
00:02:26,840 --> 00:02:30,360
结果使用at return和at
and the results using at return and at

58
00:02:30,360 --> 00:02:34,200
投掷——稍后我们将看到一些投掷的例子。
throws-- we'll see some examples of at throws later.

59
00:02:34,200 --> 00:02:37,400
所以先决条件就是要求
So preconditions, that is requirements

60
00:02:37,400 --> 00:02:40,260
在参数上，应该
that are put on the parameters, should

61
00:02:40,260 --> 00:02:43,140
尽可能放入at param。
be put into the at param whenever possible.

62
00:02:43,140 --> 00:02:45,440
所以我们注意到这里有一个要求条款
So we notice that we have this requires clause here

63
00:02:45,440 --> 00:02:48,020
这给调用者设置了一个条件，一个先决条件
that puts a condition, a precondition on the caller

64
00:02:48,020 --> 00:02:50,400
以确保这是满意的。
to make sure that that's satisfied.

65
00:02:50,400 --> 00:02:53,340
我们把后置条件放入at-return和at-throws中。
And we put postconditions into the at return and at throws.

66
00:02:53,340 --> 00:02:57,660
所以我们描述了我是什么
So we put a description of what that i is that it returns

67
00:02:57,660 --> 00:03:00,850
它必须是
and the constraint that it has to be

68
00:03:00,850 --> 00:03:04,217
一个元音出现的索引——我们把它放到光圈里。
an index where a vowel occurs-- we put that into the aperture.

70
00:03:06,960 --> 00:03:08,910
现在Javadoc文档的优势
Now the advantage of Javadoc documentation

71
00:03:08,910 --> 00:03:11,740
我们可以运行一个工具
is that we can run a tool that will automatically

72
00:03:11,740 --> 00:03:15,700
提取这些评论并生成
extract these comments and produce

73
00:03:15,700 --> 00:03:17,270
有吸引力的文件。
attractive documentation from it.

74
00:03:17,270 --> 00:03:21,620
所以所有的标准Java API库文档
So all of the standard Java API library documentation

75
00:03:21,620 --> 00:03:24,770
直接来自Javadoc对Java的评论
is coming directly out of Javadoc comments on the Java

76
00:03:24,770 --> 00:03:25,670
库源。
library source.

78
00:03:28,850 --> 00:03:32,020
有一个工具，事实上，
And there is a tool actually-- in fact,

79
00:03:32,020 --> 00:03:34,510
该工具内置于Eclipse中——您
the tool is built into Eclipse-- that you

80
00:03:34,510 --> 00:03:38,590
可以用来生成那些Javadoc HTML文件
can use to generate those Javadoc HTML files

81
00:03:38,590 --> 00:03:39,880
从你自己的源代码。
from your own source code.

82
00:03:39,880 --> 00:03:43,640
所以这就是为什么格式化您的规范是一个好主意
So that's why it's a good idea to format your specifications

83
00:03:43,640 --> 00:03:47,600
像这样使用Javadoc语法。
using Javadoc syntax like this.

84
00:03:47,600 --> 00:03:51,570
现在我们来谈谈一个特别有用的
Now let's talk about a particularly useful

85
00:03:51,570 --> 00:03:54,191
隐含前提与后条件
implicit precondition and postcondition

86
00:03:54,191 --> 00:03:56,690
我们要把所有的方法
that we're going to want to put basically on all the methods

87
00:03:56,690 --> 00:03:58,720
我们在6005年使用的。
that we use in 6005.

88
00:03:58,720 --> 00:04:00,689
这就是我们要排除空值。
And that is we want to exclude null.

89
00:04:00,689 --> 00:04:02,230
所以我们先来谈谈空值。
So let's talk a bit about null first.

90
00:04:02,230 --> 00:04:05,740
所以在Java中，任何引用，任何变量
So in Java, any reference, any variable

91
00:04:05,740 --> 00:04:08,130
指向对象或数组的
that points to an object or to an array

92
00:04:08,130 --> 00:04:11,139
允许接受特殊值null。
is allowed to take on the special value null.

93
00:04:11,139 --> 00:04:12,930
当它为空时，基本上就是
And when it's null, that means basically it

94
00:04:12,930 --> 00:04:13,880
什么都没指。
doesn't point to anything.

95
00:04:13,880 --> 00:04:15,213
它不指向任何对象。
It doesn't point to any objects.

96
00:04:15,213 --> 00:04:16,709
它不指向任何数组。
It doesn't point to any array.

97
00:04:16,709 --> 00:04:18,434
不幸的是，这些空值--
Unfortunately, these null values--

98
00:04:18,434 --> 00:04:22,770
它们在Java中的存在——在静态类型中是完整的
the existence of them in Java-- are whole in the static type

99
00:04:22,770 --> 00:04:24,680
系统。
system.

100
00:04:24,680 --> 00:04:27,870
一个简短的便条--整个
Now a quick side note-- this whole only

101
00:04:27,870 --> 00:04:29,250
对象类型存在。
exists for object types.

102
00:04:29,250 --> 00:04:31,680
像int和double这样的原语
So primitives like int and double-- these

103
00:04:31,680 --> 00:04:32,630
不能为空。
can never be null.

104
00:04:32,630 --> 00:04:36,070
会出现语法错误，而不是语义错误
You'll get a syntax error, rather a semantic error

105
00:04:36,070 --> 00:04:42,580
如果您尝试将null用作int或double，则返回编译器。
from the compiler if you try to use null as an int or a double.

106
00:04:42,580 --> 00:04:47,679
但是任何对象或数组引用
But any object or any array reference

107
00:04:47,679 --> 00:04:48,970
可以将空值分配给它们。
can have null assigned to them.

108
00:04:48,970 --> 00:04:50,886
编译器很乐意接受这段代码
And the compiler will happily accept this code

109
00:04:50,886 --> 00:04:53,630
在编译时，但在运行时会出现错误。
at compile time, but you'll get errors at runtime.

110
00:04:53,630 --> 00:04:55,440
因为，事实上，这个空值
Because, in fact, this null value

111
00:04:55,440 --> 00:04:59,870
实际上不在字符串名称类型中。
is not actually in the string name type.

112
00:04:59,870 --> 00:05:04,300
如果试图对name调用string方法，则
If you try to call a string method on name, which

113
00:05:04,300 --> 00:05:06,400
碰巧有空值，你是
happens to have the null value, you're

114
00:05:06,400 --> 00:05:08,120
会在运行时出错。
going to get an error at runtime.

115
00:05:08,120 --> 00:05:10,090
它将产生一个空指针异常。
It's going to produce a null pointer exception.

116
00:05:10,090 --> 00:05:14,100
类似地，如果尝试获取数组的长度
Similarly, if you try to take the length of an array

117
00:05:14,100 --> 00:05:16,370
指向空的引用，你是
reference that points to null, you're

118
00:05:16,370 --> 00:05:19,190
将获得空指针异常。
going to get a null pointer exception.

119
00:05:19,190 --> 00:05:22,870
注意，因为空字符串与空字符串不同
Be careful because null is not the same as the empty string

120
00:05:22,870 --> 00:05:25,700
或长度为0的数组。
or an array of length 0.

121
00:05:25,700 --> 00:05:27,950
在空字符串和空数组上，
On empty strings and empty arrays,

122
00:05:27,950 --> 00:05:31,360
您可以调用这些方法，并可以访问这些字段
you can call these methods, and you can access these fields

123
00:05:31,360 --> 00:05:32,692
和财产。
and properties.

124
00:05:32,692 --> 00:05:34,400
空数组的长度仅为0。
The length of an empty array is simply 0.

125
00:05:34,400 --> 00:05:36,310
空字符串的长度仅为0。
The length of an empty string is simply 0.

126
00:05:36,310 --> 00:05:38,300
您不会得到这些空指针异常。
You won't get these null pointer exceptions.

127
00:05:38,300 --> 00:05:40,700
所以null实际上不是字符串。
So null is actually not a string.

128
00:05:40,700 --> 00:05:41,877
实际上不是数组。
It's actually not an array.

129
00:05:41,877 --> 00:05:44,210
这就是为什么不幸的是这是在Java中
And that's why it's unfortunate that this is in the Java

130
00:05:44,210 --> 00:05:46,460
语言，因为它导致了代码
language, because it's leading to code

131
00:05:46,460 --> 00:05:51,720
这是麻烦和不安全的，不安全的虫子。
that is troublesome and unsafe, not safe from bugs.

132
00:05:51,720 --> 00:05:55,520
所以在6005中——事实上，在大多数优秀的Java编程中--
So in 6005-- in fact, in most good Java programming--

133
00:05:55,520 --> 00:05:59,540
我们将隐式禁止空值
we're going to implicitly disallow null

134
00:05:59,540 --> 00:06:02,440
作为对象或数组的可能参数返回值
as a possible parameter return value for an object or array

135
00:06:02,440 --> 00:06:03,070
键入。
type.

136
00:06:03,070 --> 00:06:08,380
所以每个接受objector数组参数的方法，
So every method that takes an objector array parameter,

137
00:06:08,380 --> 00:06:11,300
或隐式返回objector数组类型
or returns an objector array type, implicitly

138
00:06:11,300 --> 00:06:14,540
有一个前提条件说这些东西不能为空。
has a precondition that says those things can't be null.

139
00:06:14,540 --> 00:06:17,330
并且隐式地有一个后置条件，它返回
And has implicitly has a postcondition that it's return

140
00:06:17,330 --> 00:06:19,890
值不能为空。
value can't be null.

141
00:06:19,890 --> 00:06:22,262
如果方法希望允许参数的空值
If a method wants to allow null values for a parameter

142
00:06:22,262 --> 00:06:24,220
或者如果结果可能返回空值，
or if it might return a null value as a result,

143
00:06:24,220 --> 00:06:26,600
它需要明确说明这一事实。
it needs to explicitly state that fact.

144
00:06:26,600 --> 00:06:29,696
但如果你不说，那你就不允许。
But if you don't say it, then you're not allowing it.

145
00:06:29,696 --> 00:06:32,450
一般来说，避免空值是个好主意。
In general, it's a good idea to avoid null.

146
00:06:32,450 --> 00:06:33,997
实际上有Java的扩展
There are actually extensions to Java

147
00:06:33,997 --> 00:06:35,580
允许你直接禁止空值
that allow you to forbid null directly

148
00:06:35,580 --> 00:06:37,590
自动检查
and to have it checked automatically

149
00:06:37,590 --> 00:06:39,480
在编译时或运行时。
at compile time or runtime.

150
00:06:39,480 --> 00:06:42,120
下面是其中一个框架的示例。
Here's an example of one of those frameworks.

151
00:06:42,120 --> 00:06:43,920
不幸的是，这不是标准Java中的。
That's not in standard Java, unfortunately.

153
00:06:46,041 --> 00:06:48,040
但如果是的话会很好，因为那样的话
But it would be nice if it were, because then it

154
00:06:48,040 --> 00:06:52,610
我们会进行静态检查
would be something that we'd have static checking

155
00:06:52,610 --> 00:06:54,820
支持。
support for.

156
00:06:54,820 --> 00:06:58,530
我还应该提到，这种避免无效
I should also mention that this avoidance of null

157
00:06:58,530 --> 00:07:02,100
绝对不是6005的怪癖。
is by no means a quirk of 6005.

158
00:07:02,100 --> 00:07:05,710
例如，谷歌有一个很长的讨论
For example, Google has a long discussion

159
00:07:05,710 --> 00:07:14,900
在它的番石榴Java库中，这一点是一致的。
in its Guava Java libraries that agrees with this.

160
00:07:14,900 --> 00:07:17,420
当你使用空的时候你会得到很多错误。
You get a lot of bugs when you use null.

161
00:07:17,420 --> 00:07:20,740
最好快点失败，
And it's much better to fail fast,

162
00:07:20,740 --> 00:07:23,970
正如我们在以前的课上讨论过的那样，
as we've talked about it in an earlier class,

163
00:07:23,970 --> 00:07:27,500
而不是默默地接受和传播空值。
rather than silently accepting and propagating null.

