1
00:00:01,290 --> 00:00:03,540
所以我们已经看到了Python之间的一个关键区别
So we've seen that a key difference between the Python

2
00:00:03,540 --> 00:00:05,840
Java代码是变量n有
and Java code is that the variable n has

3
00:00:05,840 --> 00:00:10,229
表示它是int的类型声明。
a type declaration that says that it's an int.

4
00:00:10,229 --> 00:00:12,770
我们这里没有明确显示的信息
We don't have that information explicitly displayed over here

5
00:00:12,770 --> 00:00:15,560
在Python中，这是因为Java
in Python, and that's because Java

6
00:00:15,560 --> 00:00:17,582
是一种静态类型语言。
is a statically typed language.

7
00:00:17,582 --> 00:00:18,540
那这是什么意思？
So what does that mean?

8
00:00:18,540 --> 00:00:20,830
这意味着所有变量的类型
That means that the types of all the variables

9
00:00:20,830 --> 00:00:23,920
必须在程序运行之前知道。
have to be known before the program runs.

10
00:00:23,920 --> 00:00:25,650
这就是静态的意思，基本上--
That's what static means, basically--

11
00:00:25,650 --> 00:00:30,710
当程序在文件系统上静止时，在一个文件中
while the program is at rest on your file system, in a file

12
00:00:30,710 --> 00:00:33,130
或者在编译时是另一种思考方式。
or at compile time is another way of thinking about it.

13
00:00:33,130 --> 00:00:35,870
那是Java转换程序源代码的时候
That's when Java converts the program source

14
00:00:35,870 --> 00:00:39,140
编码成可执行的形式。
code into an executable form.

15
00:00:39,140 --> 00:00:41,420
所以这就是静态的意思，静态类型的
So that's what static means, and statically typed

16
00:00:41,420 --> 00:00:43,430
意味着Java必须能够
means that Java has to be able to figure out

17
00:00:43,430 --> 00:00:47,240
对于每个变量，每个表达式，确切地说
for every variable, every expression, exactly what

18
00:00:47,240 --> 00:00:48,300
把它打出来。
type it's going to have.

19
00:00:48,300 --> 00:00:49,675
所以对于变量
So for the variables you actually

20
00:00:49,675 --> 00:00:52,040
必须明确地说n是int。
have to explicitly say n is an int.

21
00:00:52,040 --> 00:00:53,480
对于表达式，编译器
For the expressions, the compiler

22
00:00:53,480 --> 00:00:55,724
推导表达式的类型
deduces the type of the expression

23
00:00:55,724 --> 00:00:57,390
通过观察其参数的类型。
by looking at the type of its arguments.

24
00:00:57,390 --> 00:00:59,230
例如，如果编译器使用一个加号
So for example, if the compiler uses a plus

25
00:00:59,230 --> 00:01:03,420
b和早些时候它看到a被声明为int
b and earlier it saw that a was declared as an int

26
00:01:03,420 --> 00:01:06,690
b也被声明为int，然后它得出结论，
and that b was also declared as an int, then it concludes,

27
00:01:06,690 --> 00:01:09,140
嗯，a加b也会是整数。
well, a plus b is also going to be an int.

28
00:01:09,140 --> 00:01:11,760
所以Java，特别是Eclipse，会自动执行这个操作
So Java and, in particular, Eclipse do this automatically

29
00:01:11,760 --> 00:01:13,970
当他们写代码的时候，会告诉你
while they're writing the code, and will tell you

30
00:01:13,970 --> 00:01:16,410
当你还在的时候犯了类型错误
when you make type errors while you're still

31
00:01:16,410 --> 00:01:20,120
输入代码——当你还在输入代码时，
typing the code-- while you're still entering the code,

32
00:01:20,120 --> 00:01:22,220
我想是我该说的。
I suppose is what I should say.

33
00:01:22,220 --> 00:01:24,750
与Python和JavaScript等语言相比，
Contrast that with languages like Python and JavaScript,

34
00:01:24,750 --> 00:01:27,310
在某种意义上是动态类型的
which are dynamically typed, in the sense

35
00:01:27,310 --> 00:01:31,030
你不知道n型有什么
that you don't find out what type n has

36
00:01:31,030 --> 00:01:32,990
或者什么类型的表达式像a加b
or what type an expression like a plus b

37
00:01:32,990 --> 00:01:36,620
在你真正运行程序之前
has until you are actually running the program

38
00:01:36,620 --> 00:01:39,120
你遇到a加b，突然
and you come across a plus b, and suddenly you

39
00:01:39,120 --> 00:01:41,180
发现a和b有不兼容的类型，
find that a and b have incompatible types,

40
00:01:41,180 --> 00:01:42,850
你不能这么做，而且
and you can't do this plus, and that's

41
00:01:42,850 --> 00:01:44,349
当Python出错时。
when Python would give you an error.

42
00:01:44,349 --> 00:01:47,380
当您实际上
Java would give you an error about that when you actually

43
00:01:47,380 --> 00:01:50,731
在程序编辑器中键入a和b。
typed a plus b into your program editor.

44
00:01:50,731 --> 00:01:53,140
静态类型是一种特殊的类型
Now, static typing is a particular kind

45
00:01:53,140 --> 00:01:55,690
一个叫做静态检查的概念
of a general idea called static checking, which

46
00:01:55,690 --> 00:01:58,820
意味着在程序停止时检查错误，
means checking for bugs while the program is at rest,

47
00:01:58,820 --> 00:02:01,284
在它开始运行之前。
before it starts running.

48
00:02:01,284 --> 00:02:03,450
现在，bug从根本上说是编程的祸根。
Now, bugs are fundamentally the bane of programming.

49
00:02:03,450 --> 00:02:05,450
你花在编程上的大部分时间，
Most of the time you spend in programming,

50
00:02:05,450 --> 00:02:09,259
事实上，你花在寻找和修复错误上。
in fact, you spend looking for and fixing bugs.

51
00:02:09,259 --> 00:02:11,190
这门课的很多想法
So many of the ideas in this course

52
00:02:11,190 --> 00:02:14,460
旨在消除代码中的错误。
are aimed at eliminating bugs from your code.

53
00:02:14,460 --> 00:02:17,470
几周后我们会有一个完整的阅读。
We'll have a whole reading about that in a few weeks.

54
00:02:17,470 --> 00:02:21,350
但是静态检查是我们看到的第一个想法。
But static checking is the first idea that we've seen for this.

55
00:02:21,350 --> 00:02:23,010
静态检查和静态类型
Static checking and static typing

56
00:02:23,010 --> 00:02:25,690
防止一整类错误感染你的程序。
prevent a whole class of bugs from infecting your program.

57
00:02:25,690 --> 00:02:28,632
对于静态类型，这些错误就是
For static typing, those bugs are the ones

58
00:02:28,632 --> 00:02:31,090
对错误类型应用操作所导致的
that are caused by applying an operation to the wrong types

59
00:02:31,090 --> 00:02:31,460
关于争论。
of arguments.

60
00:02:31,460 --> 00:02:33,580
所以如果你读到一行这样的代码，
So if you read a broken line of code like this,

61
00:02:33,580 --> 00:02:37,360
它试图将两个字符串相乘。
it's trying to multiply two strings together.

62
00:02:37,360 --> 00:02:39,140
静态类型将捕获此错误
Static typing will catch this error

63
00:02:39,140 --> 00:02:41,430
当你还在输入密码的时候，
while you're still entering the code,

64
00:02:41,430 --> 00:02:44,380
而不是等到这条线
rather than waiting until this line is actually

65
00:02:44,380 --> 00:02:48,222
在执行期间到达。
reached during execution.

66
00:02:48,222 --> 00:02:50,180
所以概括起来，认为
So generalizing from that, it's useful to think

67
00:02:50,180 --> 00:02:52,280
关于三种自动检测
about three kinds of automatic checking

68
00:02:52,280 --> 00:02:55,040
一种编程语言可能会提供给我们。
that a programming language might provide us.

69
00:02:55,040 --> 00:02:57,199
一种是静态检查
One kind is this static checking that we've just

70
00:02:57,199 --> 00:02:59,490
一直在谈论在哪里会自动发现错误
been talking about where the bug is found automatically

71
00:02:59,490 --> 00:03:01,850
在你开始之前。
before you even start the program.

72
00:03:01,850 --> 00:03:03,450
另一个是动态检查
Another is dynamic checking, which

73
00:03:03,450 --> 00:03:06,160
意思是当你到达那辆小车的地方
means that when you reach that buggy place-- let's

74
00:03:06,160 --> 00:03:08,360
假设是这样的——编程
say it's something like this-- the programming

75
00:03:08,360 --> 00:03:11,550
语言发现错误并通知您
language finds the error there and notifies you

76
00:03:11,550 --> 00:03:13,260
关于这个错误。
about the error.

77
00:03:13,260 --> 00:03:15,660
但是还有第三件事，有时编程
But then there's a third thing that sometimes programming

78
00:03:15,660 --> 00:03:17,410
语言可以，但对你没有帮助
languages do, which is they don't help you

79
00:03:17,410 --> 00:03:19,210
有了这个错误，事实上，
with the error at all and, in fact,

80
00:03:19,210 --> 00:03:23,760
他们继续这样做，并产生了一个错误的答案。
they go ahead and execute this and produce a wrong answer.

81
00:03:23,760 --> 00:03:27,181
然后你必须找出是什么导致了这个错误的答案。
And then you have to figure out what caused that wrong answer.

82
00:03:27,181 --> 00:03:28,680
而那个错误的答案可能实际上
And that wrong answer might actually

83
00:03:28,680 --> 00:03:31,180
在程序的其余部分传播。
propagate through the rest of your program.

84
00:03:31,180 --> 00:03:33,560
直到很久很久以后你才会发现它。
And you won't discover it until much, much later.

85
00:03:33,560 --> 00:03:35,820
然后你就遇到了调试的问题。
And then you have a problem with debugging.

86
00:03:35,820 --> 00:03:37,690
所以在这种情况下
So it's situations where the language

87
00:03:37,690 --> 00:03:42,300
不提供经常是最痛苦的错误的检查。
provides no checking that are often the most painful bug.

88
00:03:42,300 --> 00:03:44,540
但总的来说，这里有等级制度。
But in general, there's a hierarchy here.

89
00:03:44,540 --> 00:03:47,100
我们宁愿找出我们的虫子
We would much rather find out about our bugs

90
00:03:47,100 --> 00:03:49,459
在我们开始之前。
before we even start the program.

91
00:03:49,459 --> 00:03:51,750
如果不行，我们希望能找到他们
Failing that, we would like to be able to find them out

92
00:03:51,750 --> 00:03:53,409
当程序运行时。
when the program is running.

93
00:03:53,409 --> 00:03:55,200
这真是最糟糕的情况，
And this is really the worst case to be in,

94
00:03:55,200 --> 00:03:56,730
因为这意味着你
because it means that you're having

95
00:03:56,730 --> 00:03:57,771
你自己去找虫子。
to find the bug yourself.

96
00:03:57,771 --> 00:04:01,770
你的编程语言也帮不了你。
And you're getting no help from your programming language.

97
00:04:01,770 --> 00:04:06,030
下面是一些经验法则，可以用来判断哪些错误
Now here are some rules of thumb for what kinds of errors

98
00:04:06,030 --> 00:04:09,630
Java将在不同的时间提供给您。
Java will give you at various times.

99
00:04:09,630 --> 00:04:11,960
所以在Java之类的语言中进行静态检查
So static checking in languages like Java

100
00:04:11,960 --> 00:04:15,610
会捕捉到语法错误，就像你加了额外的标点符号
will catch syntax errors, like if you put extra punctuation

101
00:04:15,610 --> 00:04:18,829
或者在你的代码中加入一些虚假的词或其他东西，
or spurious words or something into your code,

102
00:04:18,829 --> 00:04:20,930
在程序运行之前，甚至
then before the program even runs, even

103
00:04:20,930 --> 00:04:24,180
对于像Python这样的动态类型语言，
for dynamically typed languages like Python,

104
00:04:24,180 --> 00:04:27,040
你会犯错误的，或者你可能已经看到了，我相信，
you will get an error or you may have seen, I'm sure,

105
00:04:27,040 --> 00:04:29,310
Python程序中的缩进错误。
indentation errors in your Python programs.

106
00:04:29,310 --> 00:04:32,500
这些都是在程序运行之前报告的。
Those are reported before your program even starts running.

107
00:04:32,500 --> 00:04:35,620
所以语法错误是一种静态检查
So syntax errors are a form of static checking

108
00:04:35,620 --> 00:04:39,590
你已经从中受益了。
that you're already benefiting from.

109
00:04:39,590 --> 00:04:41,910
Java提供的另一种静态检查
Another kind of static checking that Java provides

110
00:04:41,910 --> 00:04:43,440
当你用错名字的时候。
is when you use the wrong name.

111
00:04:43,440 --> 00:04:46,550
所以如果我试图调用sign函数并拼写它
So if I tried to call the sign function and spelled it

112
00:04:46,550 --> 00:04:49,970
S-I-N-E，Java会在我
S-I-N-E, Java would tell me about this before I even

113
00:04:49,970 --> 00:04:51,280
启动了程序。
started the program.

114
00:04:51,280 --> 00:04:53,679
如果我给了那个函数错误的参数数目，
If I give the wrong number of arguments to that function,

115
00:04:53,679 --> 00:04:54,720
它会告诉我的。
it will tell me about it.

116
00:04:54,720 --> 00:04:57,560
如果我用错了类型，这就是我们已经讨论过的
If I use the wrong type, this is what we already talked about

117
00:04:57,560 --> 00:04:58,450
静态输入。
with static typing.

118
00:04:58,450 --> 00:05:01,230
如果我尝试传递字符串而不是浮点
If I try to pass a string instead of a floating point

119
00:05:01,230 --> 00:05:05,590
数字，然后静态地得到一个错误。
number, then I'll get an error statically.

120
00:05:05,590 --> 00:05:08,550
或者如果我试图从函数返回错误的类型，
Or if I try to return the wrong type from a function,

121
00:05:08,550 --> 00:05:12,940
如果我返回试图返回的语句
if I return statement that tries to return

122
00:05:12,940 --> 00:05:15,610
函数中的一个字符串，应该返回一个int，
a string from a function that's supposed to return an int,

123
00:05:15,610 --> 00:05:17,710
然后Java会给我静态检查。
then Java will give me static checks.

124
00:05:17,710 --> 00:05:21,420
所有这些都是静态错误
So all these things are static errors

125
00:05:21,420 --> 00:05:23,920
只有像Java这样的静态类型语言
that only a statically typed language like Java

126
00:05:23,920 --> 00:05:24,650
将提供。
will provide.

127
00:05:24,650 --> 00:05:27,127
Python和JavaScript不会。
Python and JavaScript will not.

128
00:05:27,127 --> 00:05:28,335
这些将在运行时发生。
These will happen at runtime.

129
00:05:28,335 --> 00:05:30,810
将动态检查这些
These will be dynamically checked

130
00:05:30,810 --> 00:05:33,480
通过Python和JavaScript。
by Python and JavaScript.

131
00:05:33,480 --> 00:05:36,530
事实上，有些人，有趣的是这个，
In fact, some of them, interestingly this one,

132
00:05:36,530 --> 00:05:38,840
甚至没有被JavaScript动态检查。
is not even checked dynamically by JavaScript.

133
00:05:38,840 --> 00:05:42,135
幸运的是，Python做到了。
Fortunately, Python does.

134
00:05:42,135 --> 00:05:43,510
所以这些都是Java
So these are all things that Java

135
00:05:43,510 --> 00:05:45,750
可以通过查看您的代码
can figure out by looking at your code

136
00:05:45,750 --> 00:05:46,750
甚至不运行它。
without even running it.

137
00:05:46,750 --> 00:05:49,000
以下是一些Java无法解决的问题。
Here are some things that Java can't figure out.

138
00:05:49,000 --> 00:05:51,920
如果参数值不合法，
So if there's an illegal argument value,

139
00:05:51,920 --> 00:05:54,840
有一个值是类型的一部分，
there's a value that is part of a type,

140
00:05:54,840 --> 00:06:00,410
但对于这个特殊的功能来说这实际上是不合法的，
but it's not actually legal for this particular function,

141
00:06:00,410 --> 00:06:03,350
那么动态检查可以捕获它，但是静态检查不能。
then dynamic checking can catch it but static checking can't.

142
00:06:03,350 --> 00:06:07,010
例如，除法对大多数整数来说都很好，
So for example, division is fine for most integers,

143
00:06:07,010 --> 00:06:10,170
但如果y恰好是0，那么它将失败。
but if y happens to be 0, then it will fail.

144
00:06:10,170 --> 00:06:12,450
现在，Java没有简单的方法
Now, there's no easy way for Java

145
00:06:12,450 --> 00:06:16,830
在编译时找出这个表达式中的y
to figure out at compile time whether y in this expression

146
00:06:16,830 --> 00:06:17,810
将为0。
will be 0.

147
00:06:17,810 --> 00:06:19,880
所以这得等到
So this has to wait until it's actually

148
00:06:19,880 --> 00:06:23,890
运行，直到它到达此表达式并看到y为0
running, until it reaches this expression and sees that y is 0

149
00:06:23,890 --> 00:06:25,300
然后给你一个错误。
and then gives you an error.

151
00:06:28,470 --> 00:06:30,860
另一个例子是不可表示的返回值。
Another example is unrepresentable return values.

152
00:06:30,860 --> 00:06:34,050
例如，当特定的返回值不能
For example, when the specific return value can't actually

153
00:06:34,050 --> 00:06:37,200
代表类型。
be representing the type.

154
00:06:37,200 --> 00:06:40,600
你倾向于使用例外，我们将讨论
This you tend to use exceptions, which we'll talk

155
00:06:40,600 --> 00:06:43,610
在几次阅读中。
about in a couple of readings.

156
00:06:43,610 --> 00:06:46,080
另一个是超出范围的索引。
Another is out of range indexes.

157
00:06:46,080 --> 00:06:48,500
例如，如果您试图索引到一个列表中
So for example, if you try to index into a list

158
00:06:48,500 --> 00:06:51,010
或者在数组中使用负数
or into an array and you use a negative number

159
00:06:51,010 --> 00:06:53,200
或者你用一个更大的数字
or you use a number that's larger

160
00:06:53,200 --> 00:06:57,040
列表的大小或字符串的大小
than the size of the list or than the size of the string

161
00:06:57,040 --> 00:06:58,950
那又会导致一个动态错误，
then that will cause a dynamic error, again,

162
00:06:58,950 --> 00:07:01,710
因为同样的原因，你会得到动态错误
for the similar reason that you would get dynamic errors

163
00:07:01,710 --> 00:07:05,006
用于非法参数值或调用方法
for illegal argument values or for calling a method

164
00:07:05,006 --> 00:07:06,130
在空对象引用上。
on a null object reference.

165
00:07:06,130 --> 00:07:07,504
我们稍后再谈null，
We'll talk more about null later,

166
00:07:07,504 --> 00:07:09,610
但你可以认为它在Python中是没有的。
but you can think of it being like none in Python.

168
00:07:12,340 --> 00:07:14,151
所以静态检查，一般的区别
So static checking, the general difference

169
00:07:14,151 --> 00:07:16,150
在这两个类别之间，是静态检查
between these two categories, is static checking

170
00:07:16,150 --> 00:07:18,310
倾向于类型。
tends to be about types.

171
00:07:18,310 --> 00:07:20,060
所以那些独立于
So areas that are independent of specific

172
00:07:20,060 --> 00:07:21,870
变量的值，但是
value that a variable has but that

173
00:07:21,870 --> 00:07:24,290
对于该类型的每个值都将失败。
would fail for every value of that type.

175
00:07:27,140 --> 00:07:30,010
而动态检查往往是关于
Whereas dynamic checking tends to be about particular

176
00:07:30,010 --> 00:07:32,206
类型中的值。
values within a type.

178
00:07:35,300 --> 00:07:36,910
现在，不幸的是，Java中有一个陷阱
Now, unfortunately, one trap in Java

179
00:07:36,910 --> 00:07:40,270
是这些原始数字类型，如int和long
is that these primitive numeric types like int and long

180
00:07:40,270 --> 00:07:42,340
浮子和双人有角盒
and float and double have corner cases that

181
00:07:42,340 --> 00:07:44,890
不要表现得像数学上的整数
don't behave like the mathematical integers

182
00:07:44,890 --> 00:07:48,720
以及我们很多人习惯的真实数字。
and real numbers that many of us are used to.

183
00:07:48,720 --> 00:07:50,950
结果我们真的希望
And as a result some errors that we really wish

184
00:07:50,950 --> 00:07:53,340
动态检查，换句话说，错误
were dynamically checked, in other words, errors

185
00:07:53,340 --> 00:07:55,750
因为个人价值观，
that are due to individual values,

186
00:07:55,750 --> 00:07:57,860
实际上根本没有被Java检查过，
aren't actually checked at all by Java,

187
00:07:57,860 --> 00:08:00,107
这里有三个主要的陷阱。
and here are three of the major traps.

188
00:08:00,107 --> 00:08:02,190
你可能已经在Python中遇到了第一个，
First one you may have already run into in Python,

189
00:08:02,190 --> 00:08:04,490
尤其是在Python 2中编程的情况下。
particularly if you have programmed in Python 2.

190
00:08:04,490 --> 00:08:07,470
Python 3实际上解决了这个问题。
Python 3 actually fixes this.

191
00:08:07,470 --> 00:08:11,160
5除以2，音符返回一个分数，
5 divided by 2 does note return a fraction,

192
00:08:11,160 --> 00:08:13,080
不返回2.5。
does not return 2.5.

193
00:08:13,080 --> 00:08:15,610
因为5是一个整数，2是
What it does, because 5 is an integer and 2

194
00:08:15,610 --> 00:08:18,140
是一个整数，它选择整数除法，
is an integer, this selects integer division,

195
00:08:18,140 --> 00:08:21,560
这是一个返回整数的操作。
which is an operation that returns an integer.

196
00:08:21,560 --> 00:08:23,670
它基本上是截短。
And what it does basically is it truncates.

197
00:08:23,670 --> 00:08:27,050
它去掉了小数部分，所以5除以2
It eliminates the fractional part, so 5 divided by 2

198
00:08:27,050 --> 00:08:29,145
将返回2。
will return 2.

199
00:08:29,145 --> 00:08:30,520
这就是我们
So this is an example of where we

200
00:08:30,520 --> 00:08:32,200
可能希望是——嗯，
might have hoped would be-- well,

201
00:08:32,200 --> 00:08:34,741
我们可能希望得到正确的答案，也就是说，
we might have hoped we would get the correct answer, that is,

202
00:08:34,741 --> 00:08:37,230
浮点数。
a floating point number.

203
00:08:37,230 --> 00:08:39,850
但是，我们根本没有检查，
But instead, we get no checking at all,

204
00:08:39,850 --> 00:08:41,590
我们得到了错误的答案。
and we get the wrong answer out of it.

206
00:08:44,960 --> 00:08:50,820
第二类错误是整数溢出。
A second category of error is integer overflow.

207
00:08:50,820 --> 00:08:53,710
所以int和long实际上是有限的整数集。
So int and long are actually finite sets of integers.

208
00:08:53,710 --> 00:08:55,680
它们有最小值和最大值。
They have minimum and maximum values.

209
00:08:55,680 --> 00:08:58,460
例如，Int上升到大约20亿正
Int, for example, goes up to about positive 2 billion

210
00:08:58,460 --> 00:09:00,350
可以代表负20亿
and can represent about negative 2 billion

211
00:09:00,350 --> 00:09:01,970
作为它的最小值。
as its smallest value.

212
00:09:01,970 --> 00:09:05,060
这些数字看起来很庞大，但当计算机被关注时，
Those seem like big numbers, but when computers are concerned,

213
00:09:05,060 --> 00:09:06,390
10亿不是一个大数字。
a billion is not a big number.

214
00:09:06,390 --> 00:09:10,130
你可以很快计算出答案
And you can very quickly do a computation whose answer

215
00:09:10,130 --> 00:09:12,480
远远大于最大的正数
is much greater than that largest positive number

216
00:09:12,480 --> 00:09:15,430
或者比最小的负数小得多。
or much smaller than that smallest negative number.

217
00:09:15,430 --> 00:09:16,860
那会发生什么呢？
So what happens?

218
00:09:16,860 --> 00:09:19,840
不幸的是，在Java和许多编程语言中，
Unfortunately, in Java and in many programming languages,

219
00:09:19,840 --> 00:09:22,520
计算悄悄地溢出。
that computation quietly overflows.

220
00:09:22,520 --> 00:09:25,540
换言之，它会环绕并返回
In other words, it wraps around and returns

221
00:09:25,540 --> 00:09:27,890
其他任意整数
some other arbitrary integer that

222
00:09:27,890 --> 00:09:29,720
在法律规定的范围内
is somewhere in the legal range of int

223
00:09:29,720 --> 00:09:32,950
但几乎可以肯定的是，计算结果的答案是错误的
but is almost certainly the wrong answer to the computation

224
00:09:32,950 --> 00:09:33,520
你做到了。
that you did.

225
00:09:33,520 --> 00:09:37,300
所以如果你想把20亿作为整数加到20亿
So if you try to add 2 billion as an int to 2 billion

226
00:09:37,300 --> 00:09:39,770
作为智力，你不会得到40亿。
as an int, you will not get 4 billion.

227
00:09:39,770 --> 00:09:42,670
你会得到一个很大的负数。
You'll get some large negative number.

228
00:09:42,670 --> 00:09:46,260
第三类是浮点数。
And our third category are in the floating point numbers.

229
00:09:46,260 --> 00:09:49,280
Float和double是两种浮点基元类型
Float and double are the two floating point primitive types

230
00:09:49,280 --> 00:09:51,300
内置于Java中。
built into Java.

231
00:09:51,300 --> 00:09:53,130
他们有几个特殊的价值观
They have several special values that

232
00:09:53,130 --> 00:09:55,240
是IEEE浮点标准的一部分
are part of the IEEE floating point standard

233
00:09:55,240 --> 00:09:58,190
但实际上不是真实的数字。
but aren't actually real numbers.

234
00:09:58,190 --> 00:10:01,322
其中一个是这个值NAN，它不代表一个数字。
One of them is this value NAN, which stands for not a number.

235
00:10:01,322 --> 00:10:03,540
另一个是正无穷大和负无穷大，
Another is positive infinity and negative infinity,

236
00:10:03,540 --> 00:10:05,656
当你除以0时会发生这种情况。
which can happen when you divide by 0.

238
00:10:08,780 --> 00:10:10,180
所以有些手术你会
So some operations that you would

239
00:10:10,180 --> 00:10:13,040
预计会出现动态错误
expect you would get dynamic errors and that actually do

240
00:10:13,040 --> 00:10:14,540
执行时给出动态错误
give dynamic errors when you do them

241
00:10:14,540 --> 00:10:16,930
如果你除以0，
with other kinds of numbers, so if you divide by 0,

242
00:10:16,930 --> 00:10:19,860
如果你使用int，你会得到一个异常。
and you're using ints, you will get an exception.

243
00:10:19,860 --> 00:10:21,970
你将得到一个错误，你的程序将停止。
You'll get an error, and your program will stop.

244
00:10:21,970 --> 00:10:23,550
相反，对于浮点数，
Instead, with floating point numbers,

245
00:10:23,550 --> 00:10:25,258
你会得到一个特殊的值，
you will get one of these special values,

246
00:10:25,258 --> 00:10:26,764
计算将继续。
and the computation will continue.

247
00:10:26,764 --> 00:10:28,180
如果你继续计算，
And if you keep computing with it,

248
00:10:28,180 --> 00:10:31,000
你最终会得到一个糟糕的答案。
you'll end up with some kind of bad final answer.

249
00:10:31,000 --> 00:10:35,130
所以这些陷阱告诉我们为什么
So these are traps that show us why

250
00:10:35,130 --> 00:10:36,860
静态检查和动态检查
static checking and dynamic checking

251
00:10:36,860 --> 00:10:40,460
比没有支票更有价值。
can be much more valuable than no checking.

