1
00:00:00,590 --> 00:00:03,330
测试需要有正确的态度。
Testing requires having the right attitude.

2
00:00:03,330 --> 00:00:06,850
所以当你在编码的时候，你的目标是让程序工作。
So when you're coding, your goal is to make the program work.

3
00:00:06,850 --> 00:00:09,240
但是当你在测试的时候，当你在写测试的时候，
But when you're testing, when you're writing tests,

4
00:00:09,240 --> 00:00:11,172
目标实际上是让它失败。
the goal is actually to make it fail.

5
00:00:11,172 --> 00:00:15,324
最好的测试是找到一个bug。
The best kind of test is one that finds a bug.

6
00:00:15,324 --> 00:00:17,490
这是一个微妙的，但却是非常重要的区别
This is a subtle, but is really important difference

7
00:00:17,490 --> 00:00:20,460
因为如果你像个程序员一样思考
because if you're thinking like a coder

8
00:00:20,460 --> 00:00:22,200
当你写测试的时候
when you're writing your tests, then it's

9
00:00:22,200 --> 00:00:24,380
会很容易把代码当作
going to be tempting to treat that code as being

10
00:00:24,380 --> 00:00:26,860
一件珍贵的东西
a precious thing and tested very likely

11
00:00:26,860 --> 00:00:29,600
这样你就可以得到工作的回报
so you can get the reward of seeing it work

12
00:00:29,600 --> 00:00:34,130
而不是残忍的挥舞着大锤，
rather than being brutal, wielding a sledgehammer,

13
00:00:34,130 --> 00:00:35,770
到处打那东西
and beating on that thing everywhere

14
00:00:35,770 --> 00:00:38,440
它可能很脆弱，所以你可以找到虫子
it might be vulnerable so that you can find the bugs

15
00:00:38,440 --> 00:00:39,990
把他们弄出去。
and get them out of there.

16
00:00:39,990 --> 00:00:41,680
所以你想摘下你的编码帽
So you want to take off your coder hat

17
00:00:41,680 --> 00:00:45,180
戴上你的测试帽。
and put on your tester hat.

18
00:00:45,180 --> 00:00:48,680
现在，有一个策略叫做测试优先编程。
Now, there's a strategy for this called test first programming.

19
00:00:48,680 --> 00:00:51,020
测试优先编程的好处是
And the good thing about test first programming

20
00:00:51,020 --> 00:00:53,420
直到最后才离开测试
is that it's not leaving testing until the end, when

21
00:00:53,420 --> 00:00:56,110
你有一大堆代码
you have a giant pile of code and you don't really

22
00:00:56,110 --> 00:00:58,760
想测试一下。
want to have to test it.

23
00:00:58,760 --> 00:01:00,850
错误可能在代码中的任何地方。
And the bugs might be anywhere in that code.

24
00:01:00,850 --> 00:01:03,090
最好是循序渐进，
It's much better to do it incrementally,

25
00:01:03,090 --> 00:01:07,250
编写测试并在开发代码时运行它们。
to write tests and run them as you're developing your code.

26
00:01:07,250 --> 00:01:08,760
实际上，在测试优先编程中，
In fact, in test first programming,

27
00:01:08,760 --> 00:01:10,670
我们的想法是在
the idea is to write the test before you've

28
00:01:10,670 --> 00:01:13,770
写任何实现。
written any implementation.

29
00:01:13,770 --> 00:01:15,380
所以对于一个特殊的函数，你
So for a particular function, you

30
00:01:15,380 --> 00:01:17,804
会先写一个规范
would first write a specification

31
00:01:17,804 --> 00:01:19,970
对于该函数，规范描述了
for that function, where the specification describes

32
00:01:19,970 --> 00:01:22,420
函数的输入和输出行为。
the input and output behavior of the function.

33
00:01:22,420 --> 00:01:25,000
我们将进一步讨论规格
And we'll talk much more about specifications

34
00:01:25,000 --> 00:01:27,220
在未来的课堂上。
in a future class.

35
00:01:27,220 --> 00:01:30,450
基本上，它描述了函数应该做什么。
Basically, it describes what the function is supposed to do.

36
00:01:30,450 --> 00:01:32,660
然后使用那个规范，
And then using that specification,

37
00:01:32,660 --> 00:01:35,150
但在我们真正编写函数之前，
but before we've actually written the function,

38
00:01:35,150 --> 00:01:38,127
编写调用该函数的测试
you write tests that call that function

39
00:01:38,127 --> 00:01:39,960
确保它做了它应该做的
and make sure that it's doing what it should

40
00:01:39,960 --> 00:01:42,070
根据你写的说明书。
according to the spec that you wrote.

41
00:01:42,070 --> 00:01:43,520
然后你做的第三件事是
And then the third thing you do is

42
00:01:43,520 --> 00:01:46,540
去写那个函数的实际主体。
to go and write the actual body of that function.

43
00:01:46,540 --> 00:01:49,990
当你写的时候，你有测试用例
And while you're writing it, you have test cases

44
00:01:49,990 --> 00:01:53,220
你可以一直跑直到他们
that you can be continuously running until they all

45
00:01:53,220 --> 00:01:53,910
变绿。
turn green.

46
00:01:53,910 --> 00:01:56,220
一旦你的代码通过了所有的测试，
And once your code passes all those tests,

47
00:01:56,220 --> 00:01:57,380
那你就知道你完了。
then you know you're done.

48
00:01:57,380 --> 00:02:01,030
按下J单元上的按钮会让人非常满意，
And it can be very satisfying to push the button on J-unit,

49
00:02:01,030 --> 00:02:04,020
看到你所有的测试都是绿色的，知道你已经完成了
see all of your test be green, and know that you're done

50
00:02:04,020 --> 00:02:08,110
你可以继续做下一件你必须做的事情。
and you can move on to the next thing that you have to build.

51
00:02:08,110 --> 00:02:10,592
所以在这堂课的习题中，
So in the problem sets for this class,

52
00:02:10,592 --> 00:02:12,550
我们要按照这个程序，这个测试
we're going to follow this procedure, this test

53
00:02:12,550 --> 00:02:13,850
第一个编程过程。
first programming procedure.

54
00:02:13,850 --> 00:02:15,700
事实上，在第一个问题集中
And in fact, in the first problem set

55
00:02:15,700 --> 00:02:18,782
我们会给你规格和测试。
we're going to give you the specification and the tests.

56
00:02:18,782 --> 00:02:20,240
你要写代码。
And you're going to write the code.

57
00:02:20,240 --> 00:02:23,170
你会有在J单元上玩的经验
And you'll get that experience of pushing play on J-unit

58
00:02:23,170 --> 00:02:24,960
看到你所有的测试都变绿了
and seeing all of your tests turn green

59
00:02:24,960 --> 00:02:26,495
这是多么值得。
and how rewarding that is.

60
00:02:26,495 --> 00:02:27,870
那我们给你一个问题集
Then we'll give you a problem set

61
00:02:27,870 --> 00:02:29,720
我们给你规格的地方。
where we give you the specs.

62
00:02:29,720 --> 00:02:31,680
但这些测试是你自己写的。
But it's up to you to write these tests.

63
00:02:31,680 --> 00:02:34,130
我们会鼓励你先测试一下
And we'll encourage you to do it in a test first way

64
00:02:34,130 --> 00:02:35,860
并实现该功能。
and to implement the function.

65
00:02:35,860 --> 00:02:38,550
然后我们会有一个问题集
And then we'll have a problem set where basically all of this

66
00:02:38,550 --> 00:02:39,640
是你的责任。
is your responsibility.

67
00:02:39,640 --> 00:02:41,848
你应该先写规格再写测试，
You should write the specs first and write the tests,

68
00:02:41,848 --> 00:02:44,531
然后编写实际的代码。
and then write the actual code.

69
00:02:44,531 --> 00:02:47,030
从这个测试优先编程中获得的另一个优势
One other advantage you get from this test first programming

70
00:02:47,030 --> 00:02:48,830
方法是写测试
methodology is that writing the test

71
00:02:48,830 --> 00:02:51,640
首先帮助您理解规范。
first helps you understand the specification.

72
00:02:51,640 --> 00:02:55,400
你实际上是这个规格的客户。
You're actually acting like a client for this spec.

73
00:02:55,400 --> 00:02:58,250
您正在编写调用函数的测试。
You're writing tests that are calling the function.

74
00:02:58,250 --> 00:02:59,900
这有助于调试规范。
And that helps you debug the spec.

75
00:02:59,900 --> 00:03:03,250
它可以帮助你发现什么是模棱两可的，或者不完整的，
It helps you find out what is ambiguous, or incomplete,

76
00:03:03,250 --> 00:03:06,040
或规格中缺少。
or missing from the specification.

77
00:03:06,040 --> 00:03:09,380
所以在实际实现之前编写这些测试
So by writing those tests before you've actually implemented

78
00:03:09,380 --> 00:03:12,030
这个规范，你正在解决一些错误
that specification, you're working out some of those bugs

79
00:03:12,030 --> 00:03:17,410
在你把这个bug实现到规范之前，你已经是规范了。
in you're spec before you bother implementing that bug to spec.

80
00:03:17,410 --> 00:03:19,610
所以现在让我们开始思考
So now let's turn to thinking about how we're going

81
00:03:19,610 --> 00:03:22,620
选择这些测试用例。
to choose these test cases.

82
00:03:22,620 --> 00:03:25,720
创建好的测试实际上是一个有趣的设计问题。
Creating good tests actually is an interesting design problem.

83
00:03:25,720 --> 00:03:28,490
我们想做一组测试用例
We want to make a set of test cases

84
00:03:28,490 --> 00:03:31,370
小到可以跑得很快
that's small enough to run quickly

85
00:03:31,370 --> 00:03:33,330
但足够大给我们信心
but large enough to give us confidence

86
00:03:33,330 --> 00:03:35,166
程序是有效的。
that the program is valid.

87
00:03:35,166 --> 00:03:39,750
我们在2005年讨论的策略是
And the strategy we talked about in 005 is to divide the input

88
00:03:39,750 --> 00:03:44,350
把函数空间分成子域，分成部分，
space of the function into sub-domains, into parts,

89
00:03:44,350 --> 00:03:46,320
每个由一组输入组成。
each consisting of a set of inputs.

90
00:03:46,320 --> 00:03:48,810
所以其中一件是一整套
So one of these things here is a whole set

91
00:03:48,810 --> 00:03:50,970
可能的功能输入。
of possible inputs to the function.

92
00:03:50,970 --> 00:03:52,970
综合起来，这些子域
And taken together, these sub-domains completely

93
00:03:52,970 --> 00:03:53,980
覆盖输入空间。
cover the input space.

94
00:03:53,980 --> 00:03:59,110
所以每个输入至少存在于这些部分中的一个。
So every input lies in at least one of these parts.

95
00:03:59,110 --> 00:04:01,920
然后对于我们的测试套件，我们选择一个测试用例
And then for our test suite, we pick one test case

96
00:04:01,920 --> 00:04:03,860
从每一个子域。
from each of these sub-domains.

97
00:04:03,860 --> 00:04:06,290
子域背后的思想是
And the idea behind sub-domains is

98
00:04:06,290 --> 00:04:08,740
我们想把输入空间分成几组
we want to partition the input space into sets

99
00:04:08,740 --> 00:04:10,170
类似的投入。
of similar inputs.

100
00:04:10,170 --> 00:04:12,790
所以在这个子域的所有输入上，
So on all of the inputs in this sub-domain,

101
00:04:12,790 --> 00:04:15,690
程序应该有类似的行为
the program should have similar behavior

102
00:04:15,690 --> 00:04:19,962
所以我们选择了一个有代表性的测试用例
so that this one representative test case we've chosen

103
00:04:19,962 --> 00:04:22,170
可能与所有其他输入行为相似
is likely to behave similarly to all the other inputs

104
00:04:22,170 --> 00:04:23,890
在那个子域中。
in that sub-domain.

105
00:04:23,890 --> 00:04:26,060
所以这种系统化的方法是一个好方法
So this systematic approach is a good way

106
00:04:26,060 --> 00:04:28,490
利用我们有限的测试资源。
to make use of our limited testing resources.

107
00:04:28,490 --> 00:04:30,690
我们不想写大量的测试
We don't want to write tests for lots

108
00:04:30,690 --> 00:04:33,190
在这个空间里多余的地方--
of redundant places in this space--

109
00:04:33,190 --> 00:04:35,990
让我们选择输入空间的测试用例
let's us choose test cases that are input space

110
00:04:35,990 --> 00:04:39,840
如果我们只是随便挑选测试，或者
that if we were just picking tests haphazardly, or picking

111
00:04:39,840 --> 00:04:42,830
他们是随机的，我们甚至可能都够不着。
them randomly, we might not even reach.

112
00:04:42,830 --> 00:04:43,970
让我们看两个例子。
Let's look at two examples.

113
00:04:43,970 --> 00:04:46,980
所以首先，大整数乘法。
So first of all, big integer multiply.

114
00:04:46,980 --> 00:04:51,090
Big integer是一个内置在Java库中的类。
Big integer is a class that's built into the Java library.

115
00:04:51,090 --> 00:04:54,579
它表示任意精度的整数，
And it represents arbitrary precision integers,

116
00:04:54,579 --> 00:04:56,120
换句话说，整数可以
in other words, integers that can get

117
00:04:56,120 --> 00:04:59,800
你需要多大就多大。
as big as you needed to get.

118
00:04:59,800 --> 00:05:01,560
不同于int和long的原始类型，
Unlike the primitive types int and long,

119
00:05:01,560 --> 00:05:03,018
范围有限
that have limited ranges, that have

120
00:05:03,018 --> 00:05:04,870
它们可以表示的最大值集，
maximum value set they can represent,

121
00:05:04,870 --> 00:05:06,320
大整数可以表示任何
big integer can represent anything

122
00:05:06,320 --> 00:05:10,110
你的记忆可以保存。
that your memory can possibly hold.

123
00:05:10,110 --> 00:05:12,244
大整数有乘法的方法。
Big integer has a method multiply.

124
00:05:12,244 --> 00:05:14,660
乘法的目的是把两个大整数相乘
And the purpose of multiply is to multiply two big integer

125
00:05:14,660 --> 00:05:15,620
共同的价值观。
values together.

126
00:05:15,620 --> 00:05:18,340
所以它需要一个大的整数值。
So it takes a big integer value.

127
00:05:18,340 --> 00:05:21,140
因为它是一个实例方法，
And because it's an instance method,

128
00:05:21,140 --> 00:05:24,770
它需要这个，这就是它被召唤的原因。
it takes this, which is what it's being called on.

129
00:05:24,770 --> 00:05:26,840
它返回一个新的大整数
And it returns a new big integer that

130
00:05:26,840 --> 00:05:30,570
是调用该方法的对象的乘积
is the product of this object that the method is called on

131
00:05:30,570 --> 00:05:32,510
以及传递给它的值。
and the value passed into it.

132
00:05:32,510 --> 00:05:34,386
例如，你可能有一个大整数a，
For example, you might have a big integer A,

133
00:05:34,386 --> 00:05:36,260
你初始化成一个大整数
that you initialized to something big integer

134
00:05:36,260 --> 00:05:39,270
B、 然后产品A，B会
B. And then the product A, B would

135
00:05:39,270 --> 00:05:43,045
是一个点乘以B。所以这个例子
be A dot multiplied B. So this example

136
00:05:43,045 --> 00:05:44,670
表明即使只有一个
shows that even though there's only one

137
00:05:44,670 --> 00:05:49,040
方法声明中的显式参数，multiply，
explicit parameter here in the method declaration, multiply,

138
00:05:49,040 --> 00:05:51,330
把它看作一个数学函数
thinking about it as a mathematical function actually

139
00:05:51,330 --> 00:05:53,360
有两个论点。
has two arguments.

140
00:05:53,360 --> 00:05:56,900
它是你调用方法的对象，然后
It's the object that you're calling the method on and then

141
00:05:56,900 --> 00:05:59,860
传递它的参数。
the parameter that you're passing it.

142
00:05:59,860 --> 00:06:02,390
在Python中，接收方法调用的对象
In Python, the object receiving the method call

143
00:06:02,390 --> 00:06:05,490
将在方法中显式命名为参数。
will be explicitly named as a parameter here in the method.

144
00:06:05,490 --> 00:06:07,190
它将被称为自我。
It will be called self.

145
00:06:07,190 --> 00:06:08,650
Java，你没说。
Java, you don't mention that.

146
00:06:08,650 --> 00:06:12,230
它隐含在这个方法声明中。
And it's implicit in this method declaration.

147
00:06:12,230 --> 00:06:15,080
它恰好被称为这个而不是细胞。
And it happens to be called this instead of cells.

148
00:06:15,080 --> 00:06:18,270
这就是Java和Python之间的区别。
So those are differences between Java and Python.

149
00:06:18,270 --> 00:06:20,590
但是从测试和分区的角度来看
But from the point of view of testing, and partitioning

150
00:06:20,590 --> 00:06:22,220
子域中的空间，我们应该
the space in the sub domains, we should

151
00:06:22,220 --> 00:06:25,010
把乘法看作一个接受两个输入的函数，
think of multiply as a function taking two inputs,

152
00:06:25,010 --> 00:06:28,770
它们中的每一个都是大整数类型，也会产生一个输出
each of them of type big integer producing one output also

153
00:06:28,770 --> 00:06:29,780
大整数类型的。
of type big integers.

154
00:06:29,780 --> 00:06:34,020
所以它是两个参数和一个返回的函数。
So it's a function of the two arguments and one return.

155
00:06:34,020 --> 00:06:36,870
所以我们有一个二维输入空间
So we have a two-dimensional input space consisting

156
00:06:36,870 --> 00:06:42,030
所有整数对中的A，B。现在我们对它进行分区。
of all the pairs of integers A, B. Now let's partition it.

157
00:06:42,030 --> 00:06:43,530
所以想想乘法
So thinking about how multiplication

158
00:06:43,530 --> 00:06:47,010
作品与乘法的各种情况
works and the different kinds of cases of multiplication

159
00:06:47,010 --> 00:06:48,930
你可能在学校学到的，
that you might have learned about in school,

160
00:06:48,930 --> 00:06:51,100
我们可以从这些分区开始。
we might start with these partitions.

161
00:06:51,100 --> 00:06:52,640
首先，A和B都是阳性，
First, A and B are both positive,

162
00:06:52,640 --> 00:06:54,265
这应该会给我们一个积极的结果。
which should give us a positive result.

163
00:06:54,265 --> 00:06:55,870
第二，A和B都是阴性的，
Second, A and B are both negative,

164
00:06:55,870 --> 00:06:57,370
我们必须小心
where we have to be careful and make

165
00:06:57,370 --> 00:06:59,680
我们肯定会有好结果的。第二，A
sure we get a positive result. Second, A

166
00:06:59,680 --> 00:07:03,210
是正的，B是负的，A和负的，B是正的。
is positive B is negative, A and negative, B is positive.

167
00:07:03,210 --> 00:07:05,840
所以这是四个合理的分区
So those are four reasonable partitions

168
00:07:05,840 --> 00:07:07,200
对于乘法运算。
for the multiply operation.

169
00:07:07,200 --> 00:07:10,050
请注意，我们考虑过当
And notice that we thought about how multiply works when

170
00:07:10,050 --> 00:07:12,285
决定那些分区。
deciding on those partitions.

171
00:07:12,285 --> 00:07:13,660
还有一些特殊情况
There are also some special cases

172
00:07:13,660 --> 00:07:16,820
对于乘法，我们应该检查特定的值。
for multiplication, particular values that we should check.

173
00:07:16,820 --> 00:07:19,134
0，它总是应该产生0，
0, which is always supposed to produce 0,

174
00:07:19,134 --> 00:07:21,550
1，这应该是身份——它应该总是
1, which is supposed to be the identity-- it should always

175
00:07:21,550 --> 00:07:24,850
产生与之相乘的另一个值--
produce the other value that you're multiplying it with--

176
00:07:24,850 --> 00:07:29,100
负1，就像负身份一样。
and negative 1, which is like the negative identity.

177
00:07:29,100 --> 00:07:31,050
最后，作为一个可疑的测试者
And finally, as the suspicious tester

178
00:07:31,050 --> 00:07:34,100
他在想会发生什么
who's thinking about what might go

179
00:07:34,100 --> 00:07:38,970
在这些实现中是错误的，用大锤敲打它，
wrong in these implementations, beating it with a sledgehammer,

180
00:07:38,970 --> 00:07:41,980
我们可能会想，好吧，也许大整数的实现者
we might think, well, maybe the implementer of big integer

181
00:07:41,980 --> 00:07:44,320
试图通过使用
is trying to make it faster by using

182
00:07:44,320 --> 00:07:47,850
尽可能在内部使用这些原始整数之一
one of these primitive integers internally whenever possible

183
00:07:47,850 --> 00:07:49,980
只会回到一个昂贵的将军身边
and only falling back to an expensive general

184
00:07:49,980 --> 00:07:52,790
表示法，例如，一个数字列表
representation, like, say, a list of digits

185
00:07:52,790 --> 00:07:55,200
当值变得太大时。
when the value gets too big.

186
00:07:55,200 --> 00:07:58,610
所以我们也应该试试大的，大的整数
So we should also try integers that are very big, bigger

187
00:07:58,610 --> 00:08:00,100
比最大的长。
than the biggest long.

188
00:08:00,100 --> 00:08:02,480
这给了我们一种不同的划分。
And this gives us a different kind of partition.

189
00:08:02,480 --> 00:08:06,040
所以A或B是一个小整数，足够小
So A or B is a small integer, one small enough

190
00:08:06,040 --> 00:08:07,530
适合于一个整数或长整数。
to fit into an int or a long.

191
00:08:07,530 --> 00:08:10,840
顺便说一句，这仍然是一个很大的限制。
That's still, by the way, a pretty big limit.

192
00:08:10,840 --> 00:08:13,120
另一方面，A或B的绝对值
The other way, the absolute value of A or B

193
00:08:13,120 --> 00:08:17,310
比你能装进原语的还要大。
is bigger than you can fit into a primitive.

194
00:08:17,310 --> 00:08:19,280
长点最大值实际上会给你
Long dot max value will actually give you

195
00:08:19,280 --> 00:08:21,280
Java中最大的可能原始整数。
the biggest possible primitive integer in Java.

196
00:08:21,280 --> 00:08:24,050
大约是63的2倍。
And it's roughly 2 to the 63 power.

197
00:08:24,050 --> 00:08:25,550
所以我们想做个实验。
So we would like to experiment.

198
00:08:25,550 --> 00:08:29,320
我们想做一些测试，测试A和B的大值
We'd like to have tests that try big values of A and B

199
00:08:29,320 --> 00:08:30,900
为了确保我们真的
in order to make sure that we really

200
00:08:30,900 --> 00:08:35,400
使用大整数的方式。
are using big integers the way they can be used.

201
00:08:35,400 --> 00:08:37,240
所以让我们把这些观察结果
So let's bring all of these observations

202
00:08:37,240 --> 00:08:39,130
一起形成一个简单的分区
together into a straightforward partition

203
00:08:39,130 --> 00:08:42,610
整个二维A，B空间。
of the whole two-dimensional A, B space.

204
00:08:42,610 --> 00:08:45,840
所以我们要从这些部分中独立选择A和B。
So we're going to choose A and B independently from these parts.

205
00:08:45,840 --> 00:08:48,860
看看这里很有用。
And it's useful to look at it over here.

206
00:08:48,860 --> 00:08:51,420
我们把A区域分成了很多负数，
We've split up the A range into large negative numbers,

207
00:08:51,420 --> 00:08:54,886
小负数，负1，0，1，小正数，
small negative numbers, negative 1, 0, 1, small positive,

208
00:08:54,886 --> 00:08:55,760
一个很大的积极因素。
and a large positive.

209
00:08:55,760 --> 00:08:58,190
我们对B也做了同样的事。
And we've done the same thing with B.

210
00:08:58,190 --> 00:09:01,380
这两个分区的乘积
And the product of those two partitions

211
00:09:01,380 --> 00:09:03,950
给我们这些子域。
gives us these sub-domains.

212
00:09:03,950 --> 00:09:07,010
所以这是一个子域，其中a是一个很大的负数
So this is a sub-domain in which A is a large negative number

213
00:09:07,010 --> 00:09:08,540
B是一个很大的负数。
and B is a large negative number.

214
00:09:08,540 --> 00:09:13,450
这里的每个点都是一个特殊的a，B对。
And each of the points in here is a particular A, B pair.

215
00:09:13,450 --> 00:09:15,360
有了这些分区，我们最终
And with these partitions, we end up

216
00:09:15,360 --> 00:09:19,640
整个A，B空间有49个分区
with 49 partitions of the entire A, B space that completely

217
00:09:19,640 --> 00:09:21,920
覆盖整数空间。
cover the space of integers.

218
00:09:21,920 --> 00:09:26,740
为了产生一个测试，我们需要选择一些测试用例，a，B，
To produce a test, we'd want to pick some test case, A, B,

219
00:09:26,740 --> 00:09:28,870
从网格的每一个正方形。
from each square of the grid.

220
00:09:28,870 --> 00:09:31,280
例如，从这个方格中
So for example, from this square of the grid

221
00:09:31,280 --> 00:09:33,620
我们正在挑选一个a为负1的病例。
we're picking a case where A is negative 1.

222
00:09:33,620 --> 00:09:38,060
B是一个很大的正数。
B is some large positive number.

223
00:09:38,060 --> 00:09:39,870
让我们再看一个例子。
Let's look at another example.

224
00:09:39,870 --> 00:09:43,280
所以考虑max函数
So consider the max function, which

225
00:09:43,280 --> 00:09:46,820
将两个整数A和B转换为普通的、原始的、整数
takes two integers, A and B, to just ordinary, primitive, ints

226
00:09:46,820 --> 00:09:50,910
现在，返回这两个的最大值，以
now, and returns the maximum value of those two, whichever

227
00:09:50,910 --> 00:09:53,040
一个更大。
one is larger.

228
00:09:53,040 --> 00:09:56,730
这是一个函数，它接受两个参数
This is a function that takes-- this is a two argument

229
00:09:56,730 --> 00:09:57,230
功能。
function.

230
00:09:57,230 --> 00:10:00,490
它告诉两个图像并产生另一个整数。
It tells two images and produces another integer.

231
00:10:00,490 --> 00:10:02,510
从规格上看，这是有道理的
And from the spec, it makes sense

232
00:10:02,510 --> 00:10:06,400
根据它的行为把它分成一个箱子。
to partition it into the case according to how it behaves.

233
00:10:06,400 --> 00:10:07,960
所以如果A小于B
So if A is less than B, it's going

234
00:10:07,960 --> 00:10:10,416
返回B.A等于B，
to be returning B. A is equal to B,

235
00:10:10,416 --> 00:10:11,790
它可以返回其中任何一个。
it can return either one of them.

236
00:10:11,790 --> 00:10:14,370
如果A大于B，它将返回A。
If A is greater than B it's going to be returning A.

237
00:10:14,370 --> 00:10:16,590
所以有三种可能
So these are three different possible kinds

238
00:10:16,590 --> 00:10:18,960
这个函数的行为。
of behavior for this function.

239
00:10:18,960 --> 00:10:22,560
这给了我们三个不同的子域
And that gives us these three different sub-domains

240
00:10:22,560 --> 00:10:24,570
在A，B空间。
in the A, B space.

241
00:10:24,570 --> 00:10:26,380
在这种情况下，A更大--
This is the case where A is greater--

242
00:10:26,380 --> 00:10:27,840
或者B大于A。对不起。
or B is greater than A. Sorry.

243
00:10:27,840 --> 00:10:31,150
这是A等于B的线。
This is the line where A equals B.

244
00:10:31,150 --> 00:10:36,040
这就是A大于B的地方。
And this is the place where A is greater than B.

245
00:10:36,040 --> 00:10:39,440
所以我们的测试套件可以简单地选择一个测试用例
So our test suite might then simply pick a test case

246
00:10:39,440 --> 00:10:41,690
从每一个子域。
from each of these sub-domains.

247
00:10:41,690 --> 00:10:44,010
如果A等于1，B等于2，
So if A equals 1, and B equals 2,

248
00:10:44,010 --> 00:10:47,924
包括A小于B的子域等等。
that covers the sub-domain where A is less than B and so forth.

250
00:10:50,417 --> 00:10:52,000
现在，除了这些子域之外，
Now, in addition to these sub-domains,

251
00:10:52,000 --> 00:10:55,690
考虑边界通常很重要
it's often important to think about the boundaries

252
00:10:55,690 --> 00:10:56,910
在子域之间。
between sub-domains.

253
00:10:56,910 --> 00:10:59,850
例如，0是正负之间的边界
For example, 0 is a boundary between positive and negative

254
00:10:59,850 --> 00:11:01,330
数字。
numbers.

255
00:11:01,330 --> 00:11:04,230
最大和最小可能值
The largest and smallest possible values

256
00:11:04,230 --> 00:11:06,700
范围有限的类型，如int和double
of limited range types like int and double

257
00:11:06,700 --> 00:11:08,740
是重要的界限。
are important boundaries.

258
00:11:08,740 --> 00:11:11,280
当你有一个集合，比如一个数组，或者一个字符串，
When you have a collection, like an array, or a string,

259
00:11:11,280 --> 00:11:15,390
或者一个列表，有了它，这个集合就空了
or a list, having that thing, that collection be empty

260
00:11:15,390 --> 00:11:17,920
是一个重要的边界。
is an important boundary.

261
00:11:17,920 --> 00:11:20,210
如果你说的函数
If you're talking about a function that

262
00:11:20,210 --> 00:11:22,040
带着收藏品做点什么
takes a collection and does something

263
00:11:22,040 --> 00:11:24,410
或者在收藏品里找东西，
or looks for something in the collection,

264
00:11:24,410 --> 00:11:26,380
不管事情是在开始
then whether the thing is at the beginning

265
00:11:26,380 --> 00:11:30,834
或者说收尾是一个重要的价值。
or the end of the collection is an important value.

266
00:11:30,834 --> 00:11:32,500
我们都在考虑边界的一个原因
One reason we all think about boundaries

267
00:11:32,500 --> 00:11:34,750
程序员经常在边界上犯错误。
is that programmers often make mistakes at boundaries.

268
00:11:34,750 --> 00:11:37,270
他们经常犯一个错误，比如写不到
They often make off by one errors, like writing less than

269
00:11:37,270 --> 00:11:39,478
或者等于他们应该写的少于，
or equal to where they should have written less than,

270
00:11:39,478 --> 00:11:42,512
或者从1开始而不是从0开始。
or starting from 1 instead of 0.

271
00:11:42,512 --> 00:11:43,970
另一个是有些界限可能
Another is that some boundaries may

272
00:11:43,970 --> 00:11:45,950
必须由代码中的特殊情况处理，
have to be handled by special cases in the code,

273
00:11:45,950 --> 00:11:47,408
或者它们可能是
or they may be places where there's

274
00:11:47,408 --> 00:11:50,660
代码行为的不连续性。
a discontinuity in the code's behavior.

275
00:11:50,660 --> 00:11:53,550
当整数变量溢出时
Turns out that when an integer variable overflows

276
00:11:53,550 --> 00:11:56,420
当你试图达到一个比int更高的数时
when you try to reach a higher number than int

277
00:11:56,420 --> 00:11:59,520
实际上可以代表，它突然
can actually represent, it abruptly

278
00:11:59,520 --> 00:12:00,870
跳到一个负数。
jumps down to a negative number.

279
00:12:00,870 --> 00:12:04,520
这是不连续的行为，不像正常的
And that's a discontinuous behavior, unlike normal

280
00:12:04,520 --> 00:12:06,369
增量。
increment.

281
00:12:06,369 --> 00:12:08,410
所以考虑这些界限很重要
So it's important to think about these boundaries

282
00:12:08,410 --> 00:12:10,970
考虑把它们作为子域
and think about including them as sub-domains

283
00:12:10,970 --> 00:12:12,930
在你的隔间里。
in your partition.

284
00:12:12,930 --> 00:12:15,180
事实上，事实上，我们做到了，
So we did, actually, as it turns out,

285
00:12:15,180 --> 00:12:19,662
这里有一些有用的边界，0，1和负1，
have some useful boundaries here, 0, 1, and negative 1,

286
00:12:19,662 --> 00:12:21,120
是出于思考
were ones that came out of thinking

287
00:12:21,120 --> 00:12:27,090
关于乘法的性质。
about the properties of multiplication.

288
00:12:27,090 --> 00:12:30,400
但是也可以使用这个长点max
But it would also be useful to include this long dot max

289
00:12:30,400 --> 00:12:33,240
作为实际边界条件的值，
value as an actual boundary case,

290
00:12:33,240 --> 00:12:37,180
作为此分区中的实际附加子域。
as an actual additional sub-domain in this partition.

291
00:12:37,180 --> 00:12:42,310
让我们也为麦克斯考虑一下。
Let's think about it for the max as well.

292
00:12:42,310 --> 00:12:44,420
我们在某种意义上已经有了界限，
We did in a sense already have a boundary here,

293
00:12:44,420 --> 00:12:46,560
这个地方介于A和A之间
this place between where A is less

294
00:12:46,560 --> 00:12:49,780
比B大，A比B大，但我们也应该
than B and A is greater than B. But we should also

295
00:12:49,780 --> 00:12:54,590
想想A的值是0，或者B的值
think about the values of A being 0, or the value of B

296
00:12:54,590 --> 00:12:58,160
是0，这对分区也有什么影响，
being 0, and what that also does to the partitions,

297
00:12:58,160 --> 00:13:00,760
它们之间的子域。
the sub-domains between them.

298
00:13:00,760 --> 00:13:03,840
我们还应该考虑最小整数和最大
And we should also think about minimum integers and maximum

299
00:13:03,840 --> 00:13:07,840
这里是整数，因为max函数可以
integers here because the max function may or may not

300
00:13:07,840 --> 00:13:11,500
正确处理此问题。
work correctly on this.

301
00:13:11,500 --> 00:13:12,970
然后我们，再次，选择测试用例
And then we, again, pick test cases

302
00:13:12,970 --> 00:13:15,551
涵盖我们这里所有的课程。
to cover all of the classes that we have here.

304
00:13:18,200 --> 00:13:21,130
现在，在我们将输入空间划分成子域之后，
Now, after we've partitioned the input space into sub-domains,

305
00:13:21,130 --> 00:13:23,230
实际上我们还有一些设计选择
we actually still have some design choice

306
00:13:23,230 --> 00:13:25,420
因为我们可以选择如何精疲力尽
here because we can choose how exhausted

307
00:13:25,420 --> 00:13:28,090
我们希望测试套件是。
we want the test suite to be.

308
00:13:28,090 --> 00:13:34,460
例如，在乘法例子中，
In, for example, the multiply example,

309
00:13:34,460 --> 00:13:36,401
我们采取了所有的方法
we took the product of all the ways

310
00:13:36,401 --> 00:13:38,900
我们分割了A，所有分割B的方法，
that we partitioned A, and all the ways that we partition B,

311
00:13:38,900 --> 00:13:41,080
最后我们得到了49个子域。
and we ended up with 49 sub-domains.

312
00:13:41,080 --> 00:13:44,610
我们为每个人挑选了一个测试用例
And we picked a test case for every single one

313
00:13:44,610 --> 00:13:46,580
在这49个测试用例中。
of those 49 test cases.

314
00:13:46,580 --> 00:13:49,270
所以这是一个详尽的方法。
So that's the exhaustive way of doing it.

315
00:13:49,270 --> 00:13:51,390
这是完整的笛卡尔积，
That's the full Cartesian product,

316
00:13:51,390 --> 00:13:56,864
每个单独参数部分的意义
the sense of the parts of each of the individual parameters

317
00:13:56,864 --> 00:13:57,530
到函数。
to the function.

319
00:14:00,270 --> 00:14:02,492
一种更轻量级的方法来考虑创建测试
A lighter weight way to think about creating the test

320
00:14:02,492 --> 00:14:04,200
因为那是很多测试用例--
case because that's a lot of test cases--

321
00:14:04,200 --> 00:14:08,130
49个测试用例是很多要选择的测试用例--
49 test cases is a lot of test cases to choose--

322
00:14:08,130 --> 00:14:10,340
只是要确保我们在
is just make sure that we're covering

323
00:14:10,340 --> 00:14:13,710
每个单独尺寸的每个部分
each part of each individual dimension

324
00:14:13,710 --> 00:14:17,996
通过一些测试用例，但不一定是每个组合。
by some test case, but not necessarily every combination.

325
00:14:17,996 --> 00:14:20,370
因此，使用这种方法，我们可以为max选择测试用例。
So with this approach, we might choose test case for max.

326
00:14:20,370 --> 00:14:23,340
这是一个小型的S5测试用例。
It's a small S5 test cases.

327
00:14:23,340 --> 00:14:26,180
事实上这就是我们在这里所做的选择，
And that is in fact the choice we made here,

328
00:14:26,180 --> 00:14:29,150
保险范围是每一个
is coverage every single one of each

329
00:14:29,150 --> 00:14:30,940
在这些个人选择中。
of these individual choices.

330
00:14:30,940 --> 00:14:33,060
但它不能确定，例如，
But it doesn't make sure that, for example,

331
00:14:33,060 --> 00:14:36,070
我们的每一个选择
for each of these choices of A we're

332
00:14:36,070 --> 00:14:38,995
打在每一个可能的选择之间的关系
hitting every possible choice of the relationship between A

333
00:14:38,995 --> 00:14:43,880
而且我们正在尽一切可能选择恋爱关系
and B and we're hitting every possible choice of relationship

334
00:14:43,880 --> 00:14:47,470
我们经常罢工
of the value of B. So often we strike

335
00:14:47,470 --> 00:14:50,130
基于我们的判断，在这些极端之间做出一些妥协，
some compromise between these extremes based on our judgment,

336
00:14:50,130 --> 00:14:53,180
基于我们的谨慎程度，并在一定程度上影响了
based on our amount of caution, and influenced somewhat

337
00:14:53,180 --> 00:14:56,000
通过白盒测试和代码覆盖率[？规则？]，其中
by white box testing and code coverage [? rules ?], which

338
00:14:56,000 --> 00:14:58,290
我们下一步要看。
we're going to look at next.

