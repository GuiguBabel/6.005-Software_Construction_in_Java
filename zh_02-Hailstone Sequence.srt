1
00:00:01,910 --> 00:00:04,480
所以今天的课，今天的阅读有两个主题。
So today's class, today's reading has two topics in it.

2
00:00:04,480 --> 00:00:06,990
我们将讨论静态类型，更一般地说，
We're going to talk about static typing and, more generally,

3
00:00:06,990 --> 00:00:08,900
静态检查。
static checking.

4
00:00:08,900 --> 00:00:11,740
我们要把它和三大地产联系起来
We're going to relate that to three big properties

5
00:00:11,740 --> 00:00:15,010
好的软件是最重要的信息
of good software that are the essential messages

6
00:00:15,010 --> 00:00:17,450
是这个班的。
of this class.

7
00:00:17,450 --> 00:00:20,790
作为一个运行示例，让我们讨论一个特定的序列
As a running example let's talk about a particular sequence

8
00:00:20,790 --> 00:00:23,450
被称为冰雹序列的数字。
of numbers called the hailstone sequence.

9
00:00:23,450 --> 00:00:24,660
定义如下。
It's defined as follows.

10
00:00:24,660 --> 00:00:26,920
所以如果你从一个整数n开始。
So if you start with an integer n.

11
00:00:26,920 --> 00:00:29,300
然后冰雹序列中的下一个数字，
Then the next number in the hailstone sequence,

12
00:00:29,300 --> 00:00:31,550
这取决于n是偶数还是奇数。
it's going to depend on whether that n is even or odd.

13
00:00:31,550 --> 00:00:35,260
如果是偶数，那么下一个数就是n除以2。
If it's even, then the next number is just n divided by 2.

14
00:00:35,260 --> 00:00:40,710
如果它是奇数，那么下一个数字是3乘以n加1。
If it's odd then the next number is 3 times n plus 1.

15
00:00:40,710 --> 00:00:43,800
你停下来，序列结束，当它达到1。
And you stop, the sequence ends, when it reaches 1.

16
00:00:43,800 --> 00:00:44,890
下面是一些例子。
So here's some examples.

17
00:00:44,890 --> 00:00:46,950
如果你从2开始，那就扯平了，
If you start with 2, that's even,

18
00:00:46,950 --> 00:00:50,710
把它除以2，得到1，序列就停止了。
and so you divide it by 2, you get 1, and the sequence stops.

19
00:00:50,710 --> 00:00:53,420
如果你从3开始因为这很奇怪，
If you start with 3 because that's odd,

20
00:00:53,420 --> 00:00:54,700
三倍，加1。
you triple it, and add 1.

21
00:00:54,700 --> 00:00:56,860
下一个数字是10。
So the next number is 10.

22
00:00:56,860 --> 00:00:57,770
现在已经扯平了。
That's now even.

23
00:00:57,770 --> 00:00:58,840
所以你除以2。
So you divide by 2.

24
00:00:58,840 --> 00:01:01,860
你降到5，这很奇怪，所以你把它翻了三倍。
And you go down to 5, which is odd, so you triple it.

25
00:01:01,860 --> 00:01:02,440
加1。
And add 1.

26
00:01:02,440 --> 00:01:04,269
到16岁。
And you get to 16.

27
00:01:04,269 --> 00:01:07,130
然后你除以2，除以2，除以2。
And then you divide by 2, divide by 2, divide by 2.

28
00:01:07,130 --> 00:01:09,410
当你到达1时，你终于停下来了。
And finally you stop when you get to 1.

29
00:01:09,410 --> 00:01:10,670
事情就这样继续下去。
And things continue like that.

30
00:01:10,670 --> 00:01:12,860
例如，你会注意到
And you'll notice, for example, that whenever

31
00:01:12,860 --> 00:01:16,100
你在冰雹序列中达到2的威力，
you reach power of 2 in a hailstone sequence,

32
00:01:16,100 --> 00:01:19,840
你很快就会除以2，然后再往下看
you're going to very quickly divide by 2, and drop back down

33
00:01:19,840 --> 00:01:22,450
然后用1完成这个序列。
and finish the sequence with 1.

34
00:01:22,450 --> 00:01:24,890
但其他种类的数字，其他起始数字，
But other kinds of numbers, other starting numbers,

35
00:01:24,890 --> 00:01:29,430
可能更令人惊讶的是序列的行为。
may be much more surprising how the sequence behaves.

36
00:01:29,430 --> 00:01:32,870
所以，如果你从7开始，你会有很多反弹。
So if you start with 7, you bounce around a lot.

37
00:01:32,870 --> 00:01:36,530
现在还不清楚这会在哪里停止。
And it's not even clear where this is going to stop.

38
00:01:36,530 --> 00:01:39,590
有一个公开的推测冰雹序列总是
There's an open conjecture that the hailstone sequence always

39
00:01:39,590 --> 00:01:41,900
最终达到每n开始1。
eventually reaches 1 for every starting n.

40
00:01:41,900 --> 00:01:43,875
但这仍然是一个悬而未决的问题。
But that's still an open question.

41
00:01:43,875 --> 00:01:45,250
这叫做冰雹序列，
It's called a hailstone sequence,

42
00:01:45,250 --> 00:01:47,080
顺便说一下，因为云中有冰雹
by the way, because hailstones in clouds

43
00:01:47,080 --> 00:01:49,270
通过上下跳动逐渐形成
form by bouncing up and down, gradually

44
00:01:49,270 --> 00:01:53,310
建造足够重量的冰直到它们落到地面。
building enough weight of ice until they fall down to earth.

45
00:01:53,310 --> 00:01:54,740
所以这是个很好的比喻
So that's sort of a nice metaphor

46
00:01:54,740 --> 00:01:56,234
因为你在想这个。
for thinking about this.

47
00:01:56,234 --> 00:01:57,900
现在我们要考虑的原因是
Now the reason we want to think about it

48
00:01:57,900 --> 00:02:01,140
因为冰雹序列是一个很好的方法
is because the hailstone sequence is a nice way

49
00:02:01,140 --> 00:02:06,930
考虑比较Python和Java。
to think about comparing Python and Java.

50
00:02:06,930 --> 00:02:09,690
所以这里有一个Java程序可以计算
So here's a Java program that computes

51
00:02:09,690 --> 00:02:12,620
冰雹序列从一个特定的n开始。
the hailstone sequence starting from a particular n.

52
00:02:12,620 --> 00:02:13,740
在这种情况下，n等于3。
In this case n equals 3.

53
00:02:13,740 --> 00:02:16,560
这是同一个Python程序
And here's the same Python program

54
00:02:16,560 --> 00:02:18,769
从同一个号码开始。
that starts at the same number.

55
00:02:18,769 --> 00:02:20,560
你会发现有些相似之处
And you'll notice there's some similarities

56
00:02:20,560 --> 00:02:23,310
Java和Python的语法也有一些不同。
and there's some differences between Java and Python syntax.

57
00:02:23,310 --> 00:02:27,530
一个很大的相似之处是
One big similarity is that the major statements

58
00:02:27,530 --> 00:02:30,060
以及主要的运算符和表达式
and the major operators and expressions

59
00:02:30,060 --> 00:02:31,190
基本上是一样的。
are basically the same.

60
00:02:31,190 --> 00:02:34,310
所以Java中的while语句与while非常相似
So a while statement in Java is very similar to a while

61
00:02:34,310 --> 00:02:35,592
Python中的语句。
statement in Python.

62
00:02:35,592 --> 00:02:37,550
它有一个条件，每次你测试
It has a condition that's tested every time you

63
00:02:37,550 --> 00:02:38,730
绕圈子走。
go around the loop.

64
00:02:38,730 --> 00:02:41,480
只要条件是真的，你就继续循环。
And as long as that condition is true, you keep looping.

65
00:02:41,480 --> 00:02:44,280
类似地，if语句有test。
Similarly an if statement has test.

66
00:02:44,280 --> 00:02:46,680
如果这个测试是真的，你会做些什么。
It has something that you do if that test is true.

67
00:02:46,680 --> 00:02:48,490
它可能还有其他的东西
And it may have an else, which is something

68
00:02:48,490 --> 00:02:51,550
如果那次测试是假的，你会的。
you do if that test is false.

69
00:02:51,550 --> 00:02:54,310
但也有一些战术上的差异。
But then there's some tactics differences.

70
00:02:54,310 --> 00:02:57,420
例如，Java要求您有一个分号
So, for example, Java requires that you have a semicolon

71
00:02:57,420 --> 00:02:59,330
在每句话的结尾。
at the end of every statement.

72
00:02:59,330 --> 00:03:04,000
而Python只允许您换行。
Whereas Python just lets you put in a line break.

73
00:03:04,000 --> 00:03:06,980
类似地，Java要求
Similarly, Java requires that there

74
00:03:06,980 --> 00:03:11,010
在while语句中用括号括住这些条件
be parentheses around these conditions in while statements

75
00:03:11,010 --> 00:03:11,960
以及if语句。
and if statements.

76
00:03:11,960 --> 00:03:13,730
所以这些括号是必需的。
So these parenthesis are required.

77
00:03:13,730 --> 00:03:16,829
它们在Python中是可选的。
They would be optional over here in Python.

78
00:03:16,829 --> 00:03:17,370
最后。
And, finally.

79
00:03:17,370 --> 00:03:20,560
Java使用花括号来表示
Java uses curly braces to indicate

80
00:03:20,560 --> 00:03:24,020
while循环中的语句块
the block of statements that is inside a while loop

81
00:03:24,020 --> 00:03:27,145
或者在if语句或else块中。
or that is inside an if statement or an else block.

82
00:03:27,145 --> 00:03:30,550
当然，在Python中，这是用冒号表示的
And in Python, of course, that's signaled by a colon

83
00:03:30,550 --> 00:03:32,820
然后通过缩进
and then by indentation that groups

84
00:03:32,820 --> 00:03:35,200
这些声明在一起。
those statements together.

85
00:03:35,200 --> 00:03:37,200
就Java而言，这些花括号
As far as Java is concerned, these curly braces

86
00:03:37,200 --> 00:03:40,260
足以告诉你在哪里
are enough to tell you where the block of statements

87
00:03:40,260 --> 00:03:42,930
while循环的开始和结束。
of the while loop begins and ends.

88
00:03:42,930 --> 00:03:45,200
这里的凹痕实际上是不相关的。
This indentation here is actually irrelevant.

89
00:03:45,200 --> 00:03:48,540
我可以用Java把这些行排成一行
I could in Java line up all of these lines

90
00:03:48,540 --> 00:03:51,000
与左边距齐平，程序
flush with the left margin, and the program

91
00:03:51,000 --> 00:03:52,250
仍然会以同样的方式工作。
would still work the same way.

92
00:03:52,250 --> 00:03:56,400
如果你想在Python中这样做，Python会抱怨的。
If you tried to do that in Python, Python would complain.

93
00:03:56,400 --> 00:04:00,860
但对于人类，对于一个读到这篇文章的程序员来说，
But for human beings, for a programmer reading this,

94
00:04:00,860 --> 00:04:05,150
我们真的还想缩进那个内部块。
we really want to still indent that inner block.

95
00:04:05,150 --> 00:04:07,440
Java不会注意额外的空间，
Java won't pay any attention to that extra spaces,

96
00:04:07,440 --> 00:04:10,470
但它真的会帮助人们认识到
but it will really help a human being recognize

97
00:04:10,470 --> 00:04:11,740
这里有一个街区。
that there is a block here.

98
00:04:11,740 --> 00:04:15,970
所有这些语句都在那个块中。
And that all of these statements are inside that block.

99
00:04:15,970 --> 00:04:19,459
所以编程是一种交流。
So programming is a form of communication.

100
00:04:19,459 --> 00:04:21,500
你不仅仅是在和电脑交流，
You're communicating not just with the computer,

101
00:04:21,500 --> 00:04:25,470
但也和人类，或者和另一个程序员
but also with human beings, either with another programmer

102
00:04:25,470 --> 00:04:28,160
需要阅读这段代码的人，甚至是你自己
who needs to read this code, or even with yourself

103
00:04:28,160 --> 00:04:30,870
稍后当你回来试着理解这个程序。
later on when you come back and try to understand this program.

104
00:04:30,870 --> 00:04:33,064
人类真的需要这个凹痕，
Humans really need that indentation,

105
00:04:33,064 --> 00:04:35,230
所以这将是我们的第一个例子，也是最简单的
so that's going to be our first example and simplest

106
00:04:35,230 --> 00:04:38,200
这门课的主要原则之一的例子。
example of one of the big principles of this course.

107
00:04:38,200 --> 00:04:41,240
使你的程序更容易阅读。
Which is making your programs easy to read.

108
00:04:41,240 --> 00:04:43,550
我们稍后再谈。
We'll come back to that later.

