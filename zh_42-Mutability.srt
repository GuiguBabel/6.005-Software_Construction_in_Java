1
00:00:00,500 --> 00:00:03,940
在之前的阅读中，我们讨论了快照图，
In a previous reading, we talked about snapshot diagrams,

2
00:00:03,940 --> 00:00:08,890
这些是系统内部事物的图片。
which are these pictures of how things look inside the system.

3
00:00:08,890 --> 00:00:11,760
当我们谈到这一点时，我们的区别之一
And when we talked about that, one of the distinctions we made

4
00:00:11,760 --> 00:00:13,410
有些对象是不可变的。
is that some objects are immutable.

5
00:00:13,410 --> 00:00:14,785
一旦它们被创造出来，它们总是
Once they're created, they always

6
00:00:14,785 --> 00:00:16,420
表示相同的值。
represent the same value.

7
00:00:16,420 --> 00:00:18,850
其他对象是可变的。
And other objects are mutable.

8
00:00:18,850 --> 00:00:20,420
可变对象的方法
Mutable objects have methods that

9
00:00:20,420 --> 00:00:23,160
让您更改该对象的值。
let you change the value of that object.

10
00:00:23,160 --> 00:00:26,340
例如，String是不可变类型的一个示例。
String, for instance, is an example of an immutable type.

11
00:00:26,340 --> 00:00:29,350
StringObject始终表示同一字符串。
StringObject always represents the same string.

12
00:00:29,350 --> 00:00:31,350
StringBuilder是一种可变类型。
StringBuilder is a mutable type.

13
00:00:31,350 --> 00:00:33,460
它有删除部分字符串的方法，
It has methods that delete parts of the string,

14
00:00:33,460 --> 00:00:35,210
或插入或替换字符，或附加
or insert or replace characters, or append

15
00:00:35,210 --> 00:00:37,720
人物等等。
characters, and so forth.

16
00:00:37,720 --> 00:00:40,210
既然字符串是不可变的，一旦它被创建，
So since String is immutable, once it's created,

17
00:00:40,210 --> 00:00:41,480
它总是有同样的价值。
it always has the same value.

18
00:00:41,480 --> 00:00:43,310
为了在结尾添加一些东西
In order to add something to the end

19
00:00:43,310 --> 00:00:45,190
一根绳子，你到底在做什么
of a string, what you're actually doing

20
00:00:45,190 --> 00:00:46,710
正在创建新字符串。
is creating a new string.

21
00:00:46,710 --> 00:00:50,600
所以当你说s加等于b或者s等于s加b，
So when you say s plus equals b or s equals s plus b,

22
00:00:50,600 --> 00:00:55,020
实际上——在内部，Java只是调用一个方法
these actually-- internally, Java simply calls a method

23
00:00:55,020 --> 00:00:56,540
concat（）在那个字符串上。
concat() on that string.

24
00:00:56,540 --> 00:00:59,430
但这实际上并没有改变原始的string对象。
But that doesn't actually change the original string object.

25
00:00:59,430 --> 00:01:01,400
相反，它创建了一个新的字符串对象。
Instead, it creates a new string object.

26
00:01:01,400 --> 00:01:05,510
我们必须重新分配一个变量，就像s，
And we have to reassign a variable that we had, like s,

27
00:01:05,510 --> 00:01:07,540
指向新字符串对象的点。
the point to that new string object.

28
00:01:07,540 --> 00:01:10,506
相反，StringBuilder对象是可变的。
In contrast, StringBuilder objects are mutable.

29
00:01:10,506 --> 00:01:12,130
StringBuilder有直接
StringBuilder has methods that directly

30
00:01:12,130 --> 00:01:13,500
更改对象的值。
change the value of the object.

31
00:01:13,500 --> 00:01:17,210
因此，StringBuilder上的append（）是非常不同的
So in particular, append() on a StringBuilder is very different

32
00:01:17,210 --> 00:01:20,620
而不是字符串上的concat（），因为它实际上在变异
than concat() on a string because it's actually mutating

33
00:01:20,620 --> 00:01:21,120
对象。
the object.

34
00:01:21,120 --> 00:01:22,684
它不会返回新的字符串。
It's not returning a fresh string.

35
00:01:22,684 --> 00:01:24,350
这意味着，特别是，我们没有
That means, in particular, we don't have

36
00:01:24,350 --> 00:01:27,070
重新分配这个sb变量。
to reassign this sb variable.

37
00:01:27,070 --> 00:01:29,060
它继续指向同一个物体，
It continues to point to the same object,

38
00:01:29,060 --> 00:01:33,250
但那个物体的意思是，那个物体的价值已经改变了。
but that object meaning, that object's value has changed.

39
00:01:33,250 --> 00:01:33,750
那又怎么样？
So what?

40
00:01:33,750 --> 00:01:37,140
在这两种情况下，你最后都会提到
In both cases you end up with s or sb referring

41
00:01:37,140 --> 00:01:39,609
到字符串ab。
to the string of characters ab.

42
00:01:39,609 --> 00:01:42,150
坦率地说，可变对象和不可变对象之间的区别
Frankly, the difference between mutable and immutable objects

43
00:01:42,150 --> 00:01:43,525
什么时候有都不重要
doesn't matter much when there is

44
00:01:43,525 --> 00:01:46,470
在这些情况下，只有一个对象的引用。
only one reference to an object like there is in these cases.

45
00:01:46,470 --> 00:01:48,090
但是在如何
But there are big differences in how

46
00:01:48,090 --> 00:01:50,630
当有多个引用时，它们的行为
they behave when there are multiple references

47
00:01:50,630 --> 00:01:51,750
到目标。
to the object.

48
00:01:51,750 --> 00:01:56,070
例如，如果我们分配一个字符串变量
So, for example, if we assign a string variable

49
00:01:56,070 --> 00:01:59,050
指向现在这个新对象
t to point to now this new object that s

50
00:01:59,050 --> 00:02:02,740
现在s和t指向字符串ab。
is pointing to so that s and t now point to the string ab.

51
00:02:02,740 --> 00:02:07,410
同样，我们将tb指定给同一个对象
And similarly, we assign tb to point to the same object

52
00:02:07,410 --> 00:02:10,860
某人所指的行为
that sb is pointing to, then the behavior

53
00:02:10,860 --> 00:02:14,910
在每个对象上附加一个字符
of appending a character to each of those objects

54
00:02:14,910 --> 00:02:17,350
完全不同。
is very different.

55
00:02:17,350 --> 00:02:21,545
在此处更改t将创建新字符串。
Changing t here creates a fresh string.

56
00:02:21,545 --> 00:02:23,860
所以它对s的意思没有影响。
And so it has no effect on what s means.

57
00:02:23,860 --> 00:02:25,840
s仍然指向字符串ab。
s still points to a string ab.

58
00:02:25,840 --> 00:02:30,860
但是使用tb变量附加一个字符
But appending a character using the tb variable

59
00:02:30,860 --> 00:02:33,330
更改该对象值。
changes that object value.

60
00:02:33,330 --> 00:02:36,209
所以某人也看到了同样的变化。
So sb sees the same change.

61
00:02:36,209 --> 00:02:37,750
这就是问题的本质
And that's the essence of the problem

62
00:02:37,750 --> 00:02:39,583
我们将在这篇文章中看到。
that we're going to look at in this reading.

63
00:02:39,583 --> 00:02:42,290
因为这对程序员来说是非常令人惊讶的
Because this can be very surprising to programmers

64
00:02:42,290 --> 00:02:45,850
可能是虫子的来源。
and can be a source of bugs.

65
00:02:45,850 --> 00:02:48,850
现在，我们可能会问，既然我们有这个不可变的字符串类，
Now, we might ask, since we have this immutable String class,

66
00:02:48,850 --> 00:02:50,920
为什么我们甚至需要一个可变的StringBuilder？
why do we even need a mutable StringBuilder?

67
00:02:50,920 --> 00:02:53,420
好吧，它的一个常见用法是连接一个大数
Well, a common use for it is to concatenate a large number

68
00:02:53,420 --> 00:02:55,010
弦在一起。
of strings together.

69
00:02:55,010 --> 00:02:57,824
所以如果我们只是用弦，
So if we were just using strings,

70
00:02:57,824 --> 00:02:59,490
这就是我们要编写的代码。
this is the kind of code we would write.

71
00:02:59,490 --> 00:03:02,340
每次连接的运行结束时间
Running end times made concatenating each time

72
00:03:02,340 --> 00:03:07,107
我们要加的数字n。
the number n that we're adding.

73
00:03:07,107 --> 00:03:08,690
但是不可变字符串的问题
But the problem with immutable strings

74
00:03:08,690 --> 00:03:11,570
这是很多临时拷贝。
is that this makes lots of temporary copies.

75
00:03:11,570 --> 00:03:14,410
当然，第一个数字实际上被复制了n次，
The first number is actually copied n times in, of course,

76
00:03:14,410 --> 00:03:16,315
最后一根绳子。
building up the final string.

77
00:03:16,315 --> 00:03:19,060
它实际上花费了二次方时间
It actually costs quadratic time just

78
00:03:19,060 --> 00:03:21,435
做所有的复制，即使我们只是连接
to do all that copying, even though we only concatenated

79
00:03:21,435 --> 00:03:23,030
最后是n个元素。
n elements in the end.

80
00:03:23,030 --> 00:03:26,090
所以StringBuilder的设计目的是最小化它的复制。
So StringBuilder is designed to minimize its copying.

81
00:03:26,090 --> 00:03:28,200
它有一个简单但聪明的内部数据
It's got a simple but clever internal data

82
00:03:28,200 --> 00:03:30,290
一种完全避免复制的结构。
structure that avoids doing any copying at all.

83
00:03:30,290 --> 00:03:31,800
它只保存字符串列表
It simply keeps a list of strings

84
00:03:31,800 --> 00:03:34,540
直到你要最后一根弦的时候
until the very end when you ask for a final string

85
00:03:34,540 --> 00:03:36,280
有两个字符串的列。
with a two-string column.

86
00:03:36,280 --> 00:03:37,990
事实上，取得好成绩
In fact, getting good performance

87
00:03:37,990 --> 00:03:39,910
是我们
is one of the main reasons why we even

88
00:03:39,910 --> 00:03:43,070
首先使用不可变对象。
use immutable objects in the first place.

89
00:03:43,070 --> 00:03:45,800
另一个是，分享可以很方便。
Another is that the sharing can be convenient.

90
00:03:45,800 --> 00:03:47,920
有时你想要你的程序的两部分
Sometimes you want two parts of your program

91
00:03:47,920 --> 00:03:50,430
能够通过分享彼此交流
to be able to communicate with each other by sharing

92
00:03:50,430 --> 00:03:52,430
一种常见的可变数据结构。
a common mutable data structure.

93
00:03:52,430 --> 00:03:55,051
今天的阅读是关于这个的危险
Today's reading though is about the dangers of this

94
00:03:55,051 --> 00:03:56,550
让你知道你得到了什么
so that you know what you're getting

95
00:03:56,550 --> 00:03:59,990
当您选择使用不可变对象时。
into when you're choosing to use immutable objects.

